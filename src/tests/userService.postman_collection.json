{
	"info": {
		"_postman_id": "20c2f95f-015c-4c4b-8f33-9f31fc63c0d6",
		"name": "userService",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "36785755",
		"_collection_link": "https://projeto-catlogo-de-eventos.postman.co/workspace/Cat%C3%A1logo-de-eventos~cbf513f9-9747-45cf-a397-52cda2cab29c/collection/36785755-20c2f95f-015c-4c4b-8f33-9f31fc63c0d6?action=share&source=collection_link&creator=36785755"
	},
	"item": [
		{
			"name": "Cadastro Success",
			"item": [
				{
					"name": "Cadastro de usuário com todos os campos",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code deve ser 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.environment.set(\"userRecentCadastreId\", pm.response.json().userId)\r",
									"    pm.environment.set(\"userRecentCadastreToken\", pm.response.json().userToken)\r",
									"    pm.environment.set(\"userRecentCadastreEmail\", pm.response.json().email)\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"userRecentCadastrePassword\", \"{Password@123\")"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"{{$randomWord}}\",\r\n    \"lastName\": \"{{$randomWord}} {{$randomWord}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"phoneNumber\": \"33333333333\",\r\n    \"password\": \"{{userRecentCadastrePassword}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{user_service_url}}",
							"host": [
								"{{user_service_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Cadastro de usuário com campos obrigatórios",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code deve ser 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Gera uma hora aleatória entre 0 e 23\r",
									"const hour = Math.floor(Math.random() * 24);\r",
									"\r",
									"// Gera um minuto aleatório entre 0 e 59\r",
									"const minute = Math.floor(Math.random() * 60);\r",
									"\r",
									"// Formata a hora e o minuto para garantir que sempre tenham dois dígitos\r",
									"const formattedHour = hour.toString().padStart(2, '0');\r",
									"const formattedMinute = minute.toString().padStart(2, '0');\r",
									"\r",
									"// Combina hora e minuto em um horário\r",
									"const randomTime = `${formattedHour}:${formattedMinute}`;\r",
									"\r",
									"// Armazena o horário em uma variável de ambiente\r",
									"pm.environment.set(\"randomStartTime\", randomTime);\r",
									"\r",
									"// Função para gerar uma data aleatória entre duas datas\r",
									"function randomDate(start, end) {\r",
									"    const date = new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));\r",
									"    const day = date.getDate().toString().padStart(2, '0'); // Formata o dia com dois dígitos\r",
									"    const month = (date.getMonth() + 1).toString().padStart(2, '0'); // Formata o mês com dois dígitos\r",
									"    const year = date.getFullYear(); // Obtém o ano com quatro dígitos\r",
									"    return `${day}/${month}/${year}`; // Retorna a data formatada\r",
									"}\r",
									"\r",
									"// Define as datas de início e fim do intervalo\r",
									"const startDate = new Date('2024-01-01');\r",
									"const endDate = new Date('2024-12-31');\r",
									"\r",
									"// Gera uma data aleatória dentro do intervalo definido\r",
									"const generatedDate = randomDate(startDate, endDate);\r",
									"\r",
									"// Armazena a data gerada em uma variável de ambiente chamada `randomDate`\r",
									"pm.environment.set(\"randomDate\", generatedDate);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"{{$randomWord}}\",\r\n    \"lastName\": \"{{$randomWord}} {{$randomWord}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"{Password@123\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{user_service_url}}",
							"host": [
								"{{user_service_url}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Cadastro campo: nome",
			"item": [
				{
					"name": "Cadastro com nome vazio",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code deve ser 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Deve validar a propriedade message\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property(\"message\");\r",
									"});\r",
									"\r",
									"pm.test(\"Deve validar a mensagem de retorno\", function () {\r",
									"    pm.expect(pm.response.text()).to.include((\"Nome não pode estar vazio\").toLowerCase());\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Gera uma hora aleatória entre 0 e 23\r",
									"const hour = Math.floor(Math.random() * 24);\r",
									"\r",
									"// Gera um minuto aleatório entre 0 e 59\r",
									"const minute = Math.floor(Math.random() * 60);\r",
									"\r",
									"// Formata a hora e o minuto para garantir que sempre tenham dois dígitos\r",
									"const formattedHour = hour.toString().padStart(2, '0');\r",
									"const formattedMinute = minute.toString().padStart(2, '0');\r",
									"\r",
									"// Combina hora e minuto em um horário\r",
									"const randomTime = `${formattedHour}:${formattedMinute}`;\r",
									"\r",
									"// Armazena o horário em uma variável de ambiente\r",
									"pm.environment.set(\"randomStartTime\", randomTime);\r",
									"\r",
									"// Função para gerar uma data aleatória entre duas datas\r",
									"function randomDate(start, end) {\r",
									"    const date = new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));\r",
									"    const day = date.getDate().toString().padStart(2, '0'); // Formata o dia com dois dígitos\r",
									"    const month = (date.getMonth() + 1).toString().padStart(2, '0'); // Formata o mês com dois dígitos\r",
									"    const year = date.getFullYear(); // Obtém o ano com quatro dígitos\r",
									"    return `${day}/${month}/${year}`; // Retorna a data formatada\r",
									"}\r",
									"\r",
									"// Define as datas de início e fim do intervalo\r",
									"const startDate = new Date('2024-01-01');\r",
									"const endDate = new Date('2024-12-31');\r",
									"\r",
									"// Gera uma data aleatória dentro do intervalo definido\r",
									"const generatedDate = randomDate(startDate, endDate);\r",
									"\r",
									"// Armazena a data gerada em uma variável de ambiente chamada `randomDate`\r",
									"pm.environment.set(\"randomDate\", generatedDate);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"\",\r\n    \"lastName\": \"{{$randomWord}} {{$randomWord}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"phoneNumber\": \"33333333333\",\r\n    \"password\": \"{Password@123\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{user_service_url}}",
							"host": [
								"{{user_service_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Cadastro sem passar o nome",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code deve ser 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Deve validar a propriedade message\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property(\"message\");\r",
									"});\r",
									"\r",
									"pm.test(\"Deve validar a mensagem de retorno\", function () {\r",
									"    pm.expect(pm.response.text()).to.include((\"Nome é obrigatório\").toLowerCase());\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Gera uma hora aleatória entre 0 e 23\r",
									"const hour = Math.floor(Math.random() * 24);\r",
									"\r",
									"// Gera um minuto aleatório entre 0 e 59\r",
									"const minute = Math.floor(Math.random() * 60);\r",
									"\r",
									"// Formata a hora e o minuto para garantir que sempre tenham dois dígitos\r",
									"const formattedHour = hour.toString().padStart(2, '0');\r",
									"const formattedMinute = minute.toString().padStart(2, '0');\r",
									"\r",
									"// Combina hora e minuto em um horário\r",
									"const randomTime = `${formattedHour}:${formattedMinute}`;\r",
									"\r",
									"// Armazena o horário em uma variável de ambiente\r",
									"pm.environment.set(\"randomStartTime\", randomTime);\r",
									"\r",
									"// Função para gerar uma data aleatória entre duas datas\r",
									"function randomDate(start, end) {\r",
									"    const date = new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));\r",
									"    const day = date.getDate().toString().padStart(2, '0'); // Formata o dia com dois dígitos\r",
									"    const month = (date.getMonth() + 1).toString().padStart(2, '0'); // Formata o mês com dois dígitos\r",
									"    const year = date.getFullYear(); // Obtém o ano com quatro dígitos\r",
									"    return `${day}/${month}/${year}`; // Retorna a data formatada\r",
									"}\r",
									"\r",
									"// Define as datas de início e fim do intervalo\r",
									"const startDate = new Date('2024-01-01');\r",
									"const endDate = new Date('2024-12-31');\r",
									"\r",
									"// Gera uma data aleatória dentro do intervalo definido\r",
									"const generatedDate = randomDate(startDate, endDate);\r",
									"\r",
									"// Armazena a data gerada em uma variável de ambiente chamada `randomDate`\r",
									"pm.environment.set(\"randomDate\", generatedDate);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"lastName\": \"{{$randomWord}} {{$randomWord}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"phoneNumber\": \"33333333333\",\r\n    \"password\": \"{Password@123\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{user_service_url}}",
							"host": [
								"{{user_service_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Cadastro com nome contendo caracteres invalidos",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code deve ser 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Deve validar a propriedade message\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property(\"message\");\r",
									"});\r",
									"\r",
									"pm.test(\"Deve validar a mensagem de retorno\", function () {\r",
									"    pm.expect(pm.response.text()).to.include((\"Nome deve conter apenas caracteres alfabéticos, acentuados e espaços\").toLowerCase());\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Gera uma hora aleatória entre 0 e 23\r",
									"const hour = Math.floor(Math.random() * 24);\r",
									"\r",
									"// Gera um minuto aleatório entre 0 e 59\r",
									"const minute = Math.floor(Math.random() * 60);\r",
									"\r",
									"// Formata a hora e o minuto para garantir que sempre tenham dois dígitos\r",
									"const formattedHour = hour.toString().padStart(2, '0');\r",
									"const formattedMinute = minute.toString().padStart(2, '0');\r",
									"\r",
									"// Combina hora e minuto em um horário\r",
									"const randomTime = `${formattedHour}:${formattedMinute}`;\r",
									"\r",
									"// Armazena o horário em uma variável de ambiente\r",
									"pm.environment.set(\"randomStartTime\", randomTime);\r",
									"\r",
									"// Função para gerar uma data aleatória entre duas datas\r",
									"function randomDate(start, end) {\r",
									"    const date = new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));\r",
									"    const day = date.getDate().toString().padStart(2, '0'); // Formata o dia com dois dígitos\r",
									"    const month = (date.getMonth() + 1).toString().padStart(2, '0'); // Formata o mês com dois dígitos\r",
									"    const year = date.getFullYear(); // Obtém o ano com quatro dígitos\r",
									"    return `${day}/${month}/${year}`; // Retorna a data formatada\r",
									"}\r",
									"\r",
									"// Define as datas de início e fim do intervalo\r",
									"const startDate = new Date('2024-01-01');\r",
									"const endDate = new Date('2024-12-31');\r",
									"\r",
									"// Gera uma data aleatória dentro do intervalo definido\r",
									"const generatedDate = randomDate(startDate, endDate);\r",
									"\r",
									"// Armazena a data gerada em uma variável de ambiente chamada `randomDate`\r",
									"pm.environment.set(\"randomDate\", generatedDate);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"{{$randomWord}} ##\",\r\n    \"lastName\": \"{{$randomWord}} {{$randomWord}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"phoneNumber\": \"33333333333\",\r\n    \"password\": \"{Password@123\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{user_service_url}}",
							"host": [
								"{{user_service_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Cadastro com nome menor que o esperado",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code deve ser 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Deve validar a propriedade message\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property(\"message\");\r",
									"});\r",
									"\r",
									"pm.test(\"Deve validar a mensagem de retorno\", function () {\r",
									"    pm.expect(pm.response.text()).to.include((\"Nome deve possuir no mínimo 3 caracteres\").toLowerCase());\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Gera uma hora aleatória entre 0 e 23\r",
									"const hour = Math.floor(Math.random() * 24);\r",
									"\r",
									"// Gera um minuto aleatório entre 0 e 59\r",
									"const minute = Math.floor(Math.random() * 60);\r",
									"\r",
									"// Formata a hora e o minuto para garantir que sempre tenham dois dígitos\r",
									"const formattedHour = hour.toString().padStart(2, '0');\r",
									"const formattedMinute = minute.toString().padStart(2, '0');\r",
									"\r",
									"// Combina hora e minuto em um horário\r",
									"const randomTime = `${formattedHour}:${formattedMinute}`;\r",
									"\r",
									"// Armazena o horário em uma variável de ambiente\r",
									"pm.environment.set(\"randomStartTime\", randomTime);\r",
									"\r",
									"// Função para gerar uma data aleatória entre duas datas\r",
									"function randomDate(start, end) {\r",
									"    const date = new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));\r",
									"    const day = date.getDate().toString().padStart(2, '0'); // Formata o dia com dois dígitos\r",
									"    const month = (date.getMonth() + 1).toString().padStart(2, '0'); // Formata o mês com dois dígitos\r",
									"    const year = date.getFullYear(); // Obtém o ano com quatro dígitos\r",
									"    return `${day}/${month}/${year}`; // Retorna a data formatada\r",
									"}\r",
									"\r",
									"// Define as datas de início e fim do intervalo\r",
									"const startDate = new Date('2024-01-01');\r",
									"const endDate = new Date('2024-12-31');\r",
									"\r",
									"// Gera uma data aleatória dentro do intervalo definido\r",
									"const generatedDate = randomDate(startDate, endDate);\r",
									"\r",
									"// Armazena a data gerada em uma variável de ambiente chamada `randomDate`\r",
									"pm.environment.set(\"randomDate\", generatedDate);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"p\",\r\n    \"lastName\": \"{{$randomWord}} {{$randomWord}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"phoneNumber\": \"33333333333\",\r\n    \"password\": \"{Password@123\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{user_service_url}}",
							"host": [
								"{{user_service_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Cadastro com nome de um tipo invalido",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code deve ser 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Deve validar a propriedade message\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property(\"message\");\r",
									"});\r",
									"\r",
									"pm.test(\"Deve validar a mensagem de retorno\", function () {\r",
									"    pm.expect(pm.response.text()).to.include((\"Nome deve ser uma string\").toLowerCase());\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Gera uma hora aleatória entre 0 e 23\r",
									"const hour = Math.floor(Math.random() * 24);\r",
									"\r",
									"// Gera um minuto aleatório entre 0 e 59\r",
									"const minute = Math.floor(Math.random() * 60);\r",
									"\r",
									"// Formata a hora e o minuto para garantir que sempre tenham dois dígitos\r",
									"const formattedHour = hour.toString().padStart(2, '0');\r",
									"const formattedMinute = minute.toString().padStart(2, '0');\r",
									"\r",
									"// Combina hora e minuto em um horário\r",
									"const randomTime = `${formattedHour}:${formattedMinute}`;\r",
									"\r",
									"// Armazena o horário em uma variável de ambiente\r",
									"pm.environment.set(\"randomStartTime\", randomTime);\r",
									"\r",
									"// Função para gerar uma data aleatória entre duas datas\r",
									"function randomDate(start, end) {\r",
									"    const date = new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));\r",
									"    const day = date.getDate().toString().padStart(2, '0'); // Formata o dia com dois dígitos\r",
									"    const month = (date.getMonth() + 1).toString().padStart(2, '0'); // Formata o mês com dois dígitos\r",
									"    const year = date.getFullYear(); // Obtém o ano com quatro dígitos\r",
									"    return `${day}/${month}/${year}`; // Retorna a data formatada\r",
									"}\r",
									"\r",
									"// Define as datas de início e fim do intervalo\r",
									"const startDate = new Date('2024-01-01');\r",
									"const endDate = new Date('2024-12-31');\r",
									"\r",
									"// Gera uma data aleatória dentro do intervalo definido\r",
									"const generatedDate = randomDate(startDate, endDate);\r",
									"\r",
									"// Armazena a data gerada em uma variável de ambiente chamada `randomDate`\r",
									"pm.environment.set(\"randomDate\", generatedDate);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": {\"number\": 9726434},\r\n    \"lastName\": \"{{$randomWord}} {{$randomWord}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"phoneNumber\": \"33333333333\",\r\n    \"password\": \"{Password@123\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{user_service_url}}",
							"host": [
								"{{user_service_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Cadastro com nome preenchido apenas com espaços",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code deve ser 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Deve validar a propriedade message\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property(\"message\");\r",
									"});\r",
									"\r",
									"pm.test(\"Deve validar a mensagem de retorno\", function () {\r",
									"    pm.expect(pm.response.text()).to.include((\"Nome deve possuir no mínimo 3 caracteres\").toLowerCase());\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Gera uma hora aleatória entre 0 e 23\r",
									"const hour = Math.floor(Math.random() * 24);\r",
									"\r",
									"// Gera um minuto aleatório entre 0 e 59\r",
									"const minute = Math.floor(Math.random() * 60);\r",
									"\r",
									"// Formata a hora e o minuto para garantir que sempre tenham dois dígitos\r",
									"const formattedHour = hour.toString().padStart(2, '0');\r",
									"const formattedMinute = minute.toString().padStart(2, '0');\r",
									"\r",
									"// Combina hora e minuto em um horário\r",
									"const randomTime = `${formattedHour}:${formattedMinute}`;\r",
									"\r",
									"// Armazena o horário em uma variável de ambiente\r",
									"pm.environment.set(\"randomStartTime\", randomTime);\r",
									"\r",
									"// Função para gerar uma data aleatória entre duas datas\r",
									"function randomDate(start, end) {\r",
									"    const date = new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));\r",
									"    const day = date.getDate().toString().padStart(2, '0'); // Formata o dia com dois dígitos\r",
									"    const month = (date.getMonth() + 1).toString().padStart(2, '0'); // Formata o mês com dois dígitos\r",
									"    const year = date.getFullYear(); // Obtém o ano com quatro dígitos\r",
									"    return `${day}/${month}/${year}`; // Retorna a data formatada\r",
									"}\r",
									"\r",
									"// Define as datas de início e fim do intervalo\r",
									"const startDate = new Date('2024-01-01');\r",
									"const endDate = new Date('2024-12-31');\r",
									"\r",
									"// Gera uma data aleatória dentro do intervalo definido\r",
									"const generatedDate = randomDate(startDate, endDate);\r",
									"\r",
									"// Armazena a data gerada em uma variável de ambiente chamada `randomDate`\r",
									"pm.environment.set(\"randomDate\", generatedDate);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"         \",\r\n    \"lastName\": \"{{$randomWord}} {{$randomWord}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"phoneNumber\": \"33333333333\",\r\n    \"password\": \"{Password@123\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{user_service_url}}",
							"host": [
								"{{user_service_url}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Cadastro campo: sobrenome",
			"item": [
				{
					"name": "Cadastro com sobrenome vazio",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code deve ser 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Deve validar a propriedade message\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property(\"message\");\r",
									"});\r",
									"\r",
									"pm.test(\"Deve validar a mensagem de retorno\", function () {\r",
									"    pm.expect(pm.response.text()).to.include((\"Sobrenome não pode estar vazio\").toLowerCase());\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Gera uma hora aleatória entre 0 e 23\r",
									"const hour = Math.floor(Math.random() * 24);\r",
									"\r",
									"// Gera um minuto aleatório entre 0 e 59\r",
									"const minute = Math.floor(Math.random() * 60);\r",
									"\r",
									"// Formata a hora e o minuto para garantir que sempre tenham dois dígitos\r",
									"const formattedHour = hour.toString().padStart(2, '0');\r",
									"const formattedMinute = minute.toString().padStart(2, '0');\r",
									"\r",
									"// Combina hora e minuto em um horário\r",
									"const randomTime = `${formattedHour}:${formattedMinute}`;\r",
									"\r",
									"// Armazena o horário em uma variável de ambiente\r",
									"pm.environment.set(\"randomStartTime\", randomTime);\r",
									"\r",
									"// Função para gerar uma data aleatória entre duas datas\r",
									"function randomDate(start, end) {\r",
									"    const date = new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));\r",
									"    const day = date.getDate().toString().padStart(2, '0'); // Formata o dia com dois dígitos\r",
									"    const month = (date.getMonth() + 1).toString().padStart(2, '0'); // Formata o mês com dois dígitos\r",
									"    const year = date.getFullYear(); // Obtém o ano com quatro dígitos\r",
									"    return `${day}/${month}/${year}`; // Retorna a data formatada\r",
									"}\r",
									"\r",
									"// Define as datas de início e fim do intervalo\r",
									"const startDate = new Date('2024-01-01');\r",
									"const endDate = new Date('2024-12-31');\r",
									"\r",
									"// Gera uma data aleatória dentro do intervalo definido\r",
									"const generatedDate = randomDate(startDate, endDate);\r",
									"\r",
									"// Armazena a data gerada em uma variável de ambiente chamada `randomDate`\r",
									"pm.environment.set(\"randomDate\", generatedDate);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"{{$randomWord}}\",\r\n    \"lastName\": \"\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"phoneNumber\": \"33333333333\",\r\n    \"password\": \"{Password@123\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{user_service_url}}",
							"host": [
								"{{user_service_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Cadastro sem passar o sobrenome",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code deve ser 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Deve validar a propriedade message\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property(\"message\");\r",
									"});\r",
									"\r",
									"pm.test(\"Deve validar a mensagem de retorno\", function () {\r",
									"    pm.expect(pm.response.text()).to.include((\"Sobrenome é obrigatório\").toLowerCase());\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Gera uma hora aleatória entre 0 e 23\r",
									"const hour = Math.floor(Math.random() * 24);\r",
									"\r",
									"// Gera um minuto aleatório entre 0 e 59\r",
									"const minute = Math.floor(Math.random() * 60);\r",
									"\r",
									"// Formata a hora e o minuto para garantir que sempre tenham dois dígitos\r",
									"const formattedHour = hour.toString().padStart(2, '0');\r",
									"const formattedMinute = minute.toString().padStart(2, '0');\r",
									"\r",
									"// Combina hora e minuto em um horário\r",
									"const randomTime = `${formattedHour}:${formattedMinute}`;\r",
									"\r",
									"// Armazena o horário em uma variável de ambiente\r",
									"pm.environment.set(\"randomStartTime\", randomTime);\r",
									"\r",
									"// Função para gerar uma data aleatória entre duas datas\r",
									"function randomDate(start, end) {\r",
									"    const date = new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));\r",
									"    const day = date.getDate().toString().padStart(2, '0'); // Formata o dia com dois dígitos\r",
									"    const month = (date.getMonth() + 1).toString().padStart(2, '0'); // Formata o mês com dois dígitos\r",
									"    const year = date.getFullYear(); // Obtém o ano com quatro dígitos\r",
									"    return `${day}/${month}/${year}`; // Retorna a data formatada\r",
									"}\r",
									"\r",
									"// Define as datas de início e fim do intervalo\r",
									"const startDate = new Date('2024-01-01');\r",
									"const endDate = new Date('2024-12-31');\r",
									"\r",
									"// Gera uma data aleatória dentro do intervalo definido\r",
									"const generatedDate = randomDate(startDate, endDate);\r",
									"\r",
									"// Armazena a data gerada em uma variável de ambiente chamada `randomDate`\r",
									"pm.environment.set(\"randomDate\", generatedDate);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"{{$randomWord}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"phoneNumber\": \"33333333333\",\r\n    \"password\": \"{Password@123\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{user_service_url}}",
							"host": [
								"{{user_service_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Cadastro com sobrenome contendo caracteres invalidos",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code deve ser 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Deve validar a propriedade message\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property(\"message\");\r",
									"});\r",
									"\r",
									"pm.test(\"Deve validar a mensagem de retorno\", function () {\r",
									"    pm.expect(pm.response.text()).to.include((\"Nome deve conter apenas caracteres alfabéticos, acentuados e espaços\").toLowerCase());\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Gera uma hora aleatória entre 0 e 23\r",
									"const hour = Math.floor(Math.random() * 24);\r",
									"\r",
									"// Gera um minuto aleatório entre 0 e 59\r",
									"const minute = Math.floor(Math.random() * 60);\r",
									"\r",
									"// Formata a hora e o minuto para garantir que sempre tenham dois dígitos\r",
									"const formattedHour = hour.toString().padStart(2, '0');\r",
									"const formattedMinute = minute.toString().padStart(2, '0');\r",
									"\r",
									"// Combina hora e minuto em um horário\r",
									"const randomTime = `${formattedHour}:${formattedMinute}`;\r",
									"\r",
									"// Armazena o horário em uma variável de ambiente\r",
									"pm.environment.set(\"randomStartTime\", randomTime);\r",
									"\r",
									"// Função para gerar uma data aleatória entre duas datas\r",
									"function randomDate(start, end) {\r",
									"    const date = new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));\r",
									"    const day = date.getDate().toString().padStart(2, '0'); // Formata o dia com dois dígitos\r",
									"    const month = (date.getMonth() + 1).toString().padStart(2, '0'); // Formata o mês com dois dígitos\r",
									"    const year = date.getFullYear(); // Obtém o ano com quatro dígitos\r",
									"    return `${day}/${month}/${year}`; // Retorna a data formatada\r",
									"}\r",
									"\r",
									"// Define as datas de início e fim do intervalo\r",
									"const startDate = new Date('2024-01-01');\r",
									"const endDate = new Date('2024-12-31');\r",
									"\r",
									"// Gera uma data aleatória dentro do intervalo definido\r",
									"const generatedDate = randomDate(startDate, endDate);\r",
									"\r",
									"// Armazena a data gerada em uma variável de ambiente chamada `randomDate`\r",
									"pm.environment.set(\"randomDate\", generatedDate);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"{{$randomWord}}\",\r\n    \"lastName\": \"{{$randomWord}} $$# {{$randomWord}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"phoneNumber\": \"33333333333\",\r\n    \"password\": \"{Password@123\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{user_service_url}}",
							"host": [
								"{{user_service_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Cadastro com sobrenome menor que o esperado",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code deve ser 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Deve validar a propriedade message\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property(\"message\");\r",
									"});\r",
									"\r",
									"pm.test(\"Deve validar a mensagem de retorno\", function () {\r",
									"    pm.expect(pm.response.text()).to.include((\"Sobrenome deve possuir no mínimo 5 caracteres\").toLowerCase());\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Gera uma hora aleatória entre 0 e 23\r",
									"const hour = Math.floor(Math.random() * 24);\r",
									"\r",
									"// Gera um minuto aleatório entre 0 e 59\r",
									"const minute = Math.floor(Math.random() * 60);\r",
									"\r",
									"// Formata a hora e o minuto para garantir que sempre tenham dois dígitos\r",
									"const formattedHour = hour.toString().padStart(2, '0');\r",
									"const formattedMinute = minute.toString().padStart(2, '0');\r",
									"\r",
									"// Combina hora e minuto em um horário\r",
									"const randomTime = `${formattedHour}:${formattedMinute}`;\r",
									"\r",
									"// Armazena o horário em uma variável de ambiente\r",
									"pm.environment.set(\"randomStartTime\", randomTime);\r",
									"\r",
									"// Função para gerar uma data aleatória entre duas datas\r",
									"function randomDate(start, end) {\r",
									"    const date = new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));\r",
									"    const day = date.getDate().toString().padStart(2, '0'); // Formata o dia com dois dígitos\r",
									"    const month = (date.getMonth() + 1).toString().padStart(2, '0'); // Formata o mês com dois dígitos\r",
									"    const year = date.getFullYear(); // Obtém o ano com quatro dígitos\r",
									"    return `${day}/${month}/${year}`; // Retorna a data formatada\r",
									"}\r",
									"\r",
									"// Define as datas de início e fim do intervalo\r",
									"const startDate = new Date('2024-01-01');\r",
									"const endDate = new Date('2024-12-31');\r",
									"\r",
									"// Gera uma data aleatória dentro do intervalo definido\r",
									"const generatedDate = randomDate(startDate, endDate);\r",
									"\r",
									"// Armazena a data gerada em uma variável de ambiente chamada `randomDate`\r",
									"pm.environment.set(\"randomDate\", generatedDate);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"{{$randomWord}}\",\r\n    \"lastName\": \"lui\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"phoneNumber\": \"33333333333\",\r\n    \"password\": \"{Password@123\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{user_service_url}}",
							"host": [
								"{{user_service_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Cadastro com sobrenome de um tipo invalido",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code deve ser 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Deve validar a propriedade message\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property(\"message\");\r",
									"});\r",
									"\r",
									"pm.test(\"Deve validar a mensagem de retorno\", function () {\r",
									"    pm.expect(pm.response.text()).to.include((\"Sobrenome deve ser uma string\").toLowerCase());\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Gera uma hora aleatória entre 0 e 23\r",
									"const hour = Math.floor(Math.random() * 24);\r",
									"\r",
									"// Gera um minuto aleatório entre 0 e 59\r",
									"const minute = Math.floor(Math.random() * 60);\r",
									"\r",
									"// Formata a hora e o minuto para garantir que sempre tenham dois dígitos\r",
									"const formattedHour = hour.toString().padStart(2, '0');\r",
									"const formattedMinute = minute.toString().padStart(2, '0');\r",
									"\r",
									"// Combina hora e minuto em um horário\r",
									"const randomTime = `${formattedHour}:${formattedMinute}`;\r",
									"\r",
									"// Armazena o horário em uma variável de ambiente\r",
									"pm.environment.set(\"randomStartTime\", randomTime);\r",
									"\r",
									"// Função para gerar uma data aleatória entre duas datas\r",
									"function randomDate(start, end) {\r",
									"    const date = new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));\r",
									"    const day = date.getDate().toString().padStart(2, '0'); // Formata o dia com dois dígitos\r",
									"    const month = (date.getMonth() + 1).toString().padStart(2, '0'); // Formata o mês com dois dígitos\r",
									"    const year = date.getFullYear(); // Obtém o ano com quatro dígitos\r",
									"    return `${day}/${month}/${year}`; // Retorna a data formatada\r",
									"}\r",
									"\r",
									"// Define as datas de início e fim do intervalo\r",
									"const startDate = new Date('2024-01-01');\r",
									"const endDate = new Date('2024-12-31');\r",
									"\r",
									"// Gera uma data aleatória dentro do intervalo definido\r",
									"const generatedDate = randomDate(startDate, endDate);\r",
									"\r",
									"// Armazena a data gerada em uma variável de ambiente chamada `randomDate`\r",
									"pm.environment.set(\"randomDate\", generatedDate);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"{{$randomWord}}\",\r\n    \"lastName\": 2230861,\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"phoneNumber\": \"33333333333\",\r\n    \"password\": \"{Password@123\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{user_service_url}}",
							"host": [
								"{{user_service_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Cadastro com sobrenome preenchido apenas com espaços",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code deve ser 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Deve validar a propriedade message\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property(\"message\");\r",
									"});\r",
									"\r",
									"pm.test(\"Deve validar a mensagem de retorno\", function () {\r",
									"    pm.expect(pm.response.text()).to.include((\"Sobrenome deve possuir no mínimo 5 caracteres\").toLowerCase());\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Gera uma hora aleatória entre 0 e 23\r",
									"const hour = Math.floor(Math.random() * 24);\r",
									"\r",
									"// Gera um minuto aleatório entre 0 e 59\r",
									"const minute = Math.floor(Math.random() * 60);\r",
									"\r",
									"// Formata a hora e o minuto para garantir que sempre tenham dois dígitos\r",
									"const formattedHour = hour.toString().padStart(2, '0');\r",
									"const formattedMinute = minute.toString().padStart(2, '0');\r",
									"\r",
									"// Combina hora e minuto em um horário\r",
									"const randomTime = `${formattedHour}:${formattedMinute}`;\r",
									"\r",
									"// Armazena o horário em uma variável de ambiente\r",
									"pm.environment.set(\"randomStartTime\", randomTime);\r",
									"\r",
									"// Função para gerar uma data aleatória entre duas datas\r",
									"function randomDate(start, end) {\r",
									"    const date = new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));\r",
									"    const day = date.getDate().toString().padStart(2, '0'); // Formata o dia com dois dígitos\r",
									"    const month = (date.getMonth() + 1).toString().padStart(2, '0'); // Formata o mês com dois dígitos\r",
									"    const year = date.getFullYear(); // Obtém o ano com quatro dígitos\r",
									"    return `${day}/${month}/${year}`; // Retorna a data formatada\r",
									"}\r",
									"\r",
									"// Define as datas de início e fim do intervalo\r",
									"const startDate = new Date('2024-01-01');\r",
									"const endDate = new Date('2024-12-31');\r",
									"\r",
									"// Gera uma data aleatória dentro do intervalo definido\r",
									"const generatedDate = randomDate(startDate, endDate);\r",
									"\r",
									"// Armazena a data gerada em uma variável de ambiente chamada `randomDate`\r",
									"pm.environment.set(\"randomDate\", generatedDate);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"{{$randomWord}}\",\r\n    \"lastName\": \"          \",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"phoneNumber\": \"33333333333\",\r\n    \"password\": \"{Password@123\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{user_service_url}}",
							"host": [
								"{{user_service_url}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Cadastro campo: email",
			"item": [
				{
					"name": "Cadastro sem passar o email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code deve ser 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Deve validar a propriedade message\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property(\"message\");\r",
									"});\r",
									"\r",
									"pm.test(\"Deve validar a mensagem de retorno\", function () {\r",
									"    pm.expect(pm.response.text()).to.include((\"Email é obrigatório\").toLowerCase());\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Gera uma hora aleatória entre 0 e 23\r",
									"const hour = Math.floor(Math.random() * 24);\r",
									"\r",
									"// Gera um minuto aleatório entre 0 e 59\r",
									"const minute = Math.floor(Math.random() * 60);\r",
									"\r",
									"// Formata a hora e o minuto para garantir que sempre tenham dois dígitos\r",
									"const formattedHour = hour.toString().padStart(2, '0');\r",
									"const formattedMinute = minute.toString().padStart(2, '0');\r",
									"\r",
									"// Combina hora e minuto em um horário\r",
									"const randomTime = `${formattedHour}:${formattedMinute}`;\r",
									"\r",
									"// Armazena o horário em uma variável de ambiente\r",
									"pm.environment.set(\"randomStartTime\", randomTime);\r",
									"\r",
									"// Função para gerar uma data aleatória entre duas datas\r",
									"function randomDate(start, end) {\r",
									"    const date = new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));\r",
									"    const day = date.getDate().toString().padStart(2, '0'); // Formata o dia com dois dígitos\r",
									"    const month = (date.getMonth() + 1).toString().padStart(2, '0'); // Formata o mês com dois dígitos\r",
									"    const year = date.getFullYear(); // Obtém o ano com quatro dígitos\r",
									"    return `${day}/${month}/${year}`; // Retorna a data formatada\r",
									"}\r",
									"\r",
									"// Define as datas de início e fim do intervalo\r",
									"const startDate = new Date('2024-01-01');\r",
									"const endDate = new Date('2024-12-31');\r",
									"\r",
									"// Gera uma data aleatória dentro do intervalo definido\r",
									"const generatedDate = randomDate(startDate, endDate);\r",
									"\r",
									"// Armazena a data gerada em uma variável de ambiente chamada `randomDate`\r",
									"pm.environment.set(\"randomDate\", generatedDate);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"{{$randomWord}}\",\r\n    \"lastName\": \"{{$randomWord}} {{$randomWord}}\",\r\n    \"phoneNumber\": \"33333333333\",\r\n    \"password\": \"{Password@123\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{user_service_url}}",
							"host": [
								"{{user_service_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Cadastro com email vazio",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code deve ser 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Deve validar a propriedade message\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property(\"message\");\r",
									"});\r",
									"\r",
									"pm.test(\"Deve validar a mensagem de retorno\", function () {\r",
									"    pm.expect(pm.response.text()).to.include((\"Email não pode estar vazio\").toLowerCase());\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Gera uma hora aleatória entre 0 e 23\r",
									"const hour = Math.floor(Math.random() * 24);\r",
									"\r",
									"// Gera um minuto aleatório entre 0 e 59\r",
									"const minute = Math.floor(Math.random() * 60);\r",
									"\r",
									"// Formata a hora e o minuto para garantir que sempre tenham dois dígitos\r",
									"const formattedHour = hour.toString().padStart(2, '0');\r",
									"const formattedMinute = minute.toString().padStart(2, '0');\r",
									"\r",
									"// Combina hora e minuto em um horário\r",
									"const randomTime = `${formattedHour}:${formattedMinute}`;\r",
									"\r",
									"// Armazena o horário em uma variável de ambiente\r",
									"pm.environment.set(\"randomStartTime\", randomTime);\r",
									"\r",
									"// Função para gerar uma data aleatória entre duas datas\r",
									"function randomDate(start, end) {\r",
									"    const date = new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));\r",
									"    const day = date.getDate().toString().padStart(2, '0'); // Formata o dia com dois dígitos\r",
									"    const month = (date.getMonth() + 1).toString().padStart(2, '0'); // Formata o mês com dois dígitos\r",
									"    const year = date.getFullYear(); // Obtém o ano com quatro dígitos\r",
									"    return `${day}/${month}/${year}`; // Retorna a data formatada\r",
									"}\r",
									"\r",
									"// Define as datas de início e fim do intervalo\r",
									"const startDate = new Date('2024-01-01');\r",
									"const endDate = new Date('2024-12-31');\r",
									"\r",
									"// Gera uma data aleatória dentro do intervalo definido\r",
									"const generatedDate = randomDate(startDate, endDate);\r",
									"\r",
									"// Armazena a data gerada em uma variável de ambiente chamada `randomDate`\r",
									"pm.environment.set(\"randomDate\", generatedDate);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"{{$randomWord}}\",\r\n    \"lastName\": \"{{$randomWord}} {{$randomWord}}\",\r\n    \"email\": \"\",\r\n    \"phoneNumber\": \"33333333333\",\r\n    \"password\": \"{Password@123\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{user_service_url}}",
							"host": [
								"{{user_service_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Cadastro com email de um tipo invalido",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code deve ser 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Deve validar a propriedade message\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property(\"message\");\r",
									"});\r",
									"\r",
									"pm.test(\"Deve validar a mensagem de retorno\", function () {\r",
									"    pm.expect(pm.response.text()).to.include((\"Email deve ser uma string\").toLowerCase());\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Gera uma hora aleatória entre 0 e 23\r",
									"const hour = Math.floor(Math.random() * 24);\r",
									"\r",
									"// Gera um minuto aleatório entre 0 e 59\r",
									"const minute = Math.floor(Math.random() * 60);\r",
									"\r",
									"// Formata a hora e o minuto para garantir que sempre tenham dois dígitos\r",
									"const formattedHour = hour.toString().padStart(2, '0');\r",
									"const formattedMinute = minute.toString().padStart(2, '0');\r",
									"\r",
									"// Combina hora e minuto em um horário\r",
									"const randomTime = `${formattedHour}:${formattedMinute}`;\r",
									"\r",
									"// Armazena o horário em uma variável de ambiente\r",
									"pm.environment.set(\"randomStartTime\", randomTime);\r",
									"\r",
									"// Função para gerar uma data aleatória entre duas datas\r",
									"function randomDate(start, end) {\r",
									"    const date = new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));\r",
									"    const day = date.getDate().toString().padStart(2, '0'); // Formata o dia com dois dígitos\r",
									"    const month = (date.getMonth() + 1).toString().padStart(2, '0'); // Formata o mês com dois dígitos\r",
									"    const year = date.getFullYear(); // Obtém o ano com quatro dígitos\r",
									"    return `${day}/${month}/${year}`; // Retorna a data formatada\r",
									"}\r",
									"\r",
									"// Define as datas de início e fim do intervalo\r",
									"const startDate = new Date('2024-01-01');\r",
									"const endDate = new Date('2024-12-31');\r",
									"\r",
									"// Gera uma data aleatória dentro do intervalo definido\r",
									"const generatedDate = randomDate(startDate, endDate);\r",
									"\r",
									"// Armazena a data gerada em uma variável de ambiente chamada `randomDate`\r",
									"pm.environment.set(\"randomDate\", generatedDate);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"{{$randomWord}}\",\r\n    \"lastName\": \"{{$randomWord}} {{$randomWord}}\",\r\n    \"email\": 2345678,\r\n    \"phoneNumber\": \"33333333333\",\r\n    \"password\": \"{Password@123\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{user_service_url}}",
							"host": [
								"{{user_service_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Cadastro com email preenchido apenas com espaços",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code deve ser 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Deve validar a propriedade message\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property(\"message\");\r",
									"});\r",
									"\r",
									"pm.test(\"Deve validar a mensagem de retorno\", function () {\r",
									"    pm.expect(pm.response.text()).to.include((\"Email deve ser um email válido\").toLowerCase());\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Gera uma hora aleatória entre 0 e 23\r",
									"const hour = Math.floor(Math.random() * 24);\r",
									"\r",
									"// Gera um minuto aleatório entre 0 e 59\r",
									"const minute = Math.floor(Math.random() * 60);\r",
									"\r",
									"// Formata a hora e o minuto para garantir que sempre tenham dois dígitos\r",
									"const formattedHour = hour.toString().padStart(2, '0');\r",
									"const formattedMinute = minute.toString().padStart(2, '0');\r",
									"\r",
									"// Combina hora e minuto em um horário\r",
									"const randomTime = `${formattedHour}:${formattedMinute}`;\r",
									"\r",
									"// Armazena o horário em uma variável de ambiente\r",
									"pm.environment.set(\"randomStartTime\", randomTime);\r",
									"\r",
									"// Função para gerar uma data aleatória entre duas datas\r",
									"function randomDate(start, end) {\r",
									"    const date = new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));\r",
									"    const day = date.getDate().toString().padStart(2, '0'); // Formata o dia com dois dígitos\r",
									"    const month = (date.getMonth() + 1).toString().padStart(2, '0'); // Formata o mês com dois dígitos\r",
									"    const year = date.getFullYear(); // Obtém o ano com quatro dígitos\r",
									"    return `${day}/${month}/${year}`; // Retorna a data formatada\r",
									"}\r",
									"\r",
									"// Define as datas de início e fim do intervalo\r",
									"const startDate = new Date('2024-01-01');\r",
									"const endDate = new Date('2024-12-31');\r",
									"\r",
									"// Gera uma data aleatória dentro do intervalo definido\r",
									"const generatedDate = randomDate(startDate, endDate);\r",
									"\r",
									"// Armazena a data gerada em uma variável de ambiente chamada `randomDate`\r",
									"pm.environment.set(\"randomDate\", generatedDate);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"{{$randomWord}}\",\r\n    \"lastName\": \"{{$randomWord}} {{$randomWord}}\",\r\n    \"email\": \"          \",\r\n    \"phoneNumber\": \"33333333333\",\r\n    \"password\": \"{Password@123\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{user_service_url}}",
							"host": [
								"{{user_service_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Cadastro com email já cadastrado anteriormente",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code deve ser 409\", function () {\r",
									"    pm.response.to.have.status(409);\r",
									"});\r",
									"\r",
									"pm.test(\"Deve validar a propriedade message\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property(\"message\");\r",
									"});\r",
									"\r",
									"pm.test(\"Deve validar a mensagem de retorno\", function () {\r",
									"    pm.expect(pm.response.text()).to.include((\"Este e-mail já está cadastrado\"));\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Gera uma hora aleatória entre 0 e 23\r",
									"const hour = Math.floor(Math.random() * 24);\r",
									"\r",
									"// Gera um minuto aleatório entre 0 e 59\r",
									"const minute = Math.floor(Math.random() * 60);\r",
									"\r",
									"// Formata a hora e o minuto para garantir que sempre tenham dois dígitos\r",
									"const formattedHour = hour.toString().padStart(2, '0');\r",
									"const formattedMinute = minute.toString().padStart(2, '0');\r",
									"\r",
									"// Combina hora e minuto em um horário\r",
									"const randomTime = `${formattedHour}:${formattedMinute}`;\r",
									"\r",
									"// Armazena o horário em uma variável de ambiente\r",
									"pm.environment.set(\"randomStartTime\", randomTime);\r",
									"\r",
									"// Função para gerar uma data aleatória entre duas datas\r",
									"function randomDate(start, end) {\r",
									"    const date = new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));\r",
									"    const day = date.getDate().toString().padStart(2, '0'); // Formata o dia com dois dígitos\r",
									"    const month = (date.getMonth() + 1).toString().padStart(2, '0'); // Formata o mês com dois dígitos\r",
									"    const year = date.getFullYear(); // Obtém o ano com quatro dígitos\r",
									"    return `${day}/${month}/${year}`; // Retorna a data formatada\r",
									"}\r",
									"\r",
									"// Define as datas de início e fim do intervalo\r",
									"const startDate = new Date('2024-01-01');\r",
									"const endDate = new Date('2024-12-31');\r",
									"\r",
									"// Gera uma data aleatória dentro do intervalo definido\r",
									"const generatedDate = randomDate(startDate, endDate);\r",
									"\r",
									"// Armazena a data gerada em uma variável de ambiente chamada `randomDate`\r",
									"pm.environment.set(\"randomDate\", generatedDate);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"{{$randomWord}}\",\r\n    \"lastName\": \"{{$randomWord}} {{$randomWord}}\",\r\n    \"email\": \"lucasm241301@gmail.com\",\r\n    \"password\": \"{Password@123\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{user_service_url}}",
							"host": [
								"{{user_service_url}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Cadastro campo: telefone",
			"item": [
				{
					"name": "Cadastro com telefone de um tipo invalido",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code deve ser 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Deve validar a propriedade message\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property(\"message\");\r",
									"});\r",
									"\r",
									"pm.test(\"Deve validar a mensagem de retorno\", function () {\r",
									"    pm.expect(pm.response.text()).to.include((\"Telefone deve ser uma string\").toLowerCase());\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Gera uma hora aleatória entre 0 e 23\r",
									"const hour = Math.floor(Math.random() * 24);\r",
									"\r",
									"// Gera um minuto aleatório entre 0 e 59\r",
									"const minute = Math.floor(Math.random() * 60);\r",
									"\r",
									"// Formata a hora e o minuto para garantir que sempre tenham dois dígitos\r",
									"const formattedHour = hour.toString().padStart(2, '0');\r",
									"const formattedMinute = minute.toString().padStart(2, '0');\r",
									"\r",
									"// Combina hora e minuto em um horário\r",
									"const randomTime = `${formattedHour}:${formattedMinute}`;\r",
									"\r",
									"// Armazena o horário em uma variável de ambiente\r",
									"pm.environment.set(\"randomStartTime\", randomTime);\r",
									"\r",
									"// Função para gerar uma data aleatória entre duas datas\r",
									"function randomDate(start, end) {\r",
									"    const date = new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));\r",
									"    const day = date.getDate().toString().padStart(2, '0'); // Formata o dia com dois dígitos\r",
									"    const month = (date.getMonth() + 1).toString().padStart(2, '0'); // Formata o mês com dois dígitos\r",
									"    const year = date.getFullYear(); // Obtém o ano com quatro dígitos\r",
									"    return `${day}/${month}/${year}`; // Retorna a data formatada\r",
									"}\r",
									"\r",
									"// Define as datas de início e fim do intervalo\r",
									"const startDate = new Date('2024-01-01');\r",
									"const endDate = new Date('2024-12-31');\r",
									"\r",
									"// Gera uma data aleatória dentro do intervalo definido\r",
									"const generatedDate = randomDate(startDate, endDate);\r",
									"\r",
									"// Armazena a data gerada em uma variável de ambiente chamada `randomDate`\r",
									"pm.environment.set(\"randomDate\", generatedDate);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"{{$randomWord}}\",\r\n    \"lastName\": \"{{$randomWord}} {{$randomWord}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"phoneNumber\": {},\r\n    \"password\": \"{Password@123\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{user_service_url}}",
							"host": [
								"{{user_service_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Cadastro com telefone menor que o esperado",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code deve ser 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Deve validar a propriedade message\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property(\"message\");\r",
									"});\r",
									"\r",
									"pm.test(\"Deve validar a mensagem de retorno\", function () {\r",
									"    pm.expect(pm.response.text()).to.include((\"Telefone deve começar com (+) e conter entre 10 e 15 dígitos numéricos\").toLowerCase());\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Gera uma hora aleatória entre 0 e 23\r",
									"const hour = Math.floor(Math.random() * 24);\r",
									"\r",
									"// Gera um minuto aleatório entre 0 e 59\r",
									"const minute = Math.floor(Math.random() * 60);\r",
									"\r",
									"// Formata a hora e o minuto para garantir que sempre tenham dois dígitos\r",
									"const formattedHour = hour.toString().padStart(2, '0');\r",
									"const formattedMinute = minute.toString().padStart(2, '0');\r",
									"\r",
									"// Combina hora e minuto em um horário\r",
									"const randomTime = `${formattedHour}:${formattedMinute}`;\r",
									"\r",
									"// Armazena o horário em uma variável de ambiente\r",
									"pm.environment.set(\"randomStartTime\", randomTime);\r",
									"\r",
									"// Função para gerar uma data aleatória entre duas datas\r",
									"function randomDate(start, end) {\r",
									"    const date = new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));\r",
									"    const day = date.getDate().toString().padStart(2, '0'); // Formata o dia com dois dígitos\r",
									"    const month = (date.getMonth() + 1).toString().padStart(2, '0'); // Formata o mês com dois dígitos\r",
									"    const year = date.getFullYear(); // Obtém o ano com quatro dígitos\r",
									"    return `${day}/${month}/${year}`; // Retorna a data formatada\r",
									"}\r",
									"\r",
									"// Define as datas de início e fim do intervalo\r",
									"const startDate = new Date('2024-01-01');\r",
									"const endDate = new Date('2024-12-31');\r",
									"\r",
									"// Gera uma data aleatória dentro do intervalo definido\r",
									"const generatedDate = randomDate(startDate, endDate);\r",
									"\r",
									"// Armazena a data gerada em uma variável de ambiente chamada `randomDate`\r",
									"pm.environment.set(\"randomDate\", generatedDate);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"{{$randomWord}}\",\r\n    \"lastName\": \"{{$randomWord}} {{$randomWord}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"phoneNumber\": \"33333\",\r\n    \"password\": \"{Password@123\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{user_service_url}}",
							"host": [
								"{{user_service_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Cadastro com telefone maior que o limite",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code deve ser 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Deve validar a propriedade message\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property(\"message\");\r",
									"});\r",
									"\r",
									"pm.test(\"Deve validar a mensagem de retorno\", function () {\r",
									"    pm.expect(pm.response.text()).to.contain((\"Telefone deve começar com (+) e conter entre 10 e 15 dígitos numéricos\").toLowerCase());\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Gera uma hora aleatória entre 0 e 23\r",
									"const hour = Math.floor(Math.random() * 24);\r",
									"\r",
									"// Gera um minuto aleatório entre 0 e 59\r",
									"const minute = Math.floor(Math.random() * 60);\r",
									"\r",
									"// Formata a hora e o minuto para garantir que sempre tenham dois dígitos\r",
									"const formattedHour = hour.toString().padStart(2, '0');\r",
									"const formattedMinute = minute.toString().padStart(2, '0');\r",
									"\r",
									"// Combina hora e minuto em um horário\r",
									"const randomTime = `${formattedHour}:${formattedMinute}`;\r",
									"\r",
									"// Armazena o horário em uma variável de ambiente\r",
									"pm.environment.set(\"randomStartTime\", randomTime);\r",
									"\r",
									"// Função para gerar uma data aleatória entre duas datas\r",
									"function randomDate(start, end) {\r",
									"    const date = new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));\r",
									"    const day = date.getDate().toString().padStart(2, '0'); // Formata o dia com dois dígitos\r",
									"    const month = (date.getMonth() + 1).toString().padStart(2, '0'); // Formata o mês com dois dígitos\r",
									"    const year = date.getFullYear(); // Obtém o ano com quatro dígitos\r",
									"    return `${day}/${month}/${year}`; // Retorna a data formatada\r",
									"}\r",
									"\r",
									"// Define as datas de início e fim do intervalo\r",
									"const startDate = new Date('2024-01-01');\r",
									"const endDate = new Date('2024-12-31');\r",
									"\r",
									"// Gera uma data aleatória dentro do intervalo definido\r",
									"const generatedDate = randomDate(startDate, endDate);\r",
									"\r",
									"// Armazena a data gerada em uma variável de ambiente chamada `randomDate`\r",
									"pm.environment.set(\"randomDate\", generatedDate);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"{{$randomWord}}\",\r\n    \"lastName\": \"{{$randomWord}} {{$randomWord}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"phoneNumber\": \"33333333332345673\",\r\n    \"password\": \"{Password@123\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{user_service_url}}",
							"host": [
								"{{user_service_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Cadastro sem passar o telefone",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code deve ser 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Deve validar a propriedade phoneNumber\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"phoneNumber\");\r",
									"    pm.expect(jsonData.phoneNumber).to.equal(null);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Gera uma hora aleatória entre 0 e 23\r",
									"const hour = Math.floor(Math.random() * 24);\r",
									"\r",
									"// Gera um minuto aleatório entre 0 e 59\r",
									"const minute = Math.floor(Math.random() * 60);\r",
									"\r",
									"// Formata a hora e o minuto para garantir que sempre tenham dois dígitos\r",
									"const formattedHour = hour.toString().padStart(2, '0');\r",
									"const formattedMinute = minute.toString().padStart(2, '0');\r",
									"\r",
									"// Combina hora e minuto em um horário\r",
									"const randomTime = `${formattedHour}:${formattedMinute}`;\r",
									"\r",
									"// Armazena o horário em uma variável de ambiente\r",
									"pm.environment.set(\"randomStartTime\", randomTime);\r",
									"\r",
									"// Função para gerar uma data aleatória entre duas datas\r",
									"function randomDate(start, end) {\r",
									"    const date = new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));\r",
									"    const day = date.getDate().toString().padStart(2, '0'); // Formata o dia com dois dígitos\r",
									"    const month = (date.getMonth() + 1).toString().padStart(2, '0'); // Formata o mês com dois dígitos\r",
									"    const year = date.getFullYear(); // Obtém o ano com quatro dígitos\r",
									"    return `${day}/${month}/${year}`; // Retorna a data formatada\r",
									"}\r",
									"\r",
									"// Define as datas de início e fim do intervalo\r",
									"const startDate = new Date('2024-01-01');\r",
									"const endDate = new Date('2024-12-31');\r",
									"\r",
									"// Gera uma data aleatória dentro do intervalo definido\r",
									"const generatedDate = randomDate(startDate, endDate);\r",
									"\r",
									"// Armazena a data gerada em uma variável de ambiente chamada `randomDate`\r",
									"pm.environment.set(\"randomDate\", generatedDate);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"{{$randomWord}}\",\r\n    \"lastName\": \"{{$randomWord}} {{$randomWord}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"{Password@123\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{user_service_url}}",
							"host": [
								"{{user_service_url}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Cadastro campo: senha",
			"item": [
				{
					"name": "Cadastro com senha vazia",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code deve ser 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Deve validar a propriedade message\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property(\"message\");\r",
									"});\r",
									"\r",
									"pm.test(\"Deve validar a mensagem de retorno\", function () {\r",
									"    pm.expect(pm.response.text()).to.include((\"Senha não pode estar vazia\").toLowerCase());\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Gera uma hora aleatória entre 0 e 23\r",
									"const hour = Math.floor(Math.random() * 24);\r",
									"\r",
									"// Gera um minuto aleatório entre 0 e 59\r",
									"const minute = Math.floor(Math.random() * 60);\r",
									"\r",
									"// Formata a hora e o minuto para garantir que sempre tenham dois dígitos\r",
									"const formattedHour = hour.toString().padStart(2, '0');\r",
									"const formattedMinute = minute.toString().padStart(2, '0');\r",
									"\r",
									"// Combina hora e minuto em um horário\r",
									"const randomTime = `${formattedHour}:${formattedMinute}`;\r",
									"\r",
									"// Armazena o horário em uma variável de ambiente\r",
									"pm.environment.set(\"randomStartTime\", randomTime);\r",
									"\r",
									"// Função para gerar uma data aleatória entre duas datas\r",
									"function randomDate(start, end) {\r",
									"    const date = new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));\r",
									"    const day = date.getDate().toString().padStart(2, '0'); // Formata o dia com dois dígitos\r",
									"    const month = (date.getMonth() + 1).toString().padStart(2, '0'); // Formata o mês com dois dígitos\r",
									"    const year = date.getFullYear(); // Obtém o ano com quatro dígitos\r",
									"    return `${day}/${month}/${year}`; // Retorna a data formatada\r",
									"}\r",
									"\r",
									"// Define as datas de início e fim do intervalo\r",
									"const startDate = new Date('2024-01-01');\r",
									"const endDate = new Date('2024-12-31');\r",
									"\r",
									"// Gera uma data aleatória dentro do intervalo definido\r",
									"const generatedDate = randomDate(startDate, endDate);\r",
									"\r",
									"// Armazena a data gerada em uma variável de ambiente chamada `randomDate`\r",
									"pm.environment.set(\"randomDate\", generatedDate);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"{{$randomWord}}\",\r\n    \"lastName\": \"{{$randomWord}} {{$randomWord}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"phoneNumber\": \"33333333333\",\r\n    \"password\": \"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{user_service_url}}",
							"host": [
								"{{user_service_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Cadastro sem passar a senha",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code deve ser 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Deve validar a propriedade message\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property(\"message\");\r",
									"});\r",
									"\r",
									"pm.test(\"Deve validar a mensagem de retorno\", function () {\r",
									"    pm.expect(pm.response.text()).to.include((\"Senha é obrigatória\").toLowerCase());\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Gera uma hora aleatória entre 0 e 23\r",
									"const hour = Math.floor(Math.random() * 24);\r",
									"\r",
									"// Gera um minuto aleatório entre 0 e 59\r",
									"const minute = Math.floor(Math.random() * 60);\r",
									"\r",
									"// Formata a hora e o minuto para garantir que sempre tenham dois dígitos\r",
									"const formattedHour = hour.toString().padStart(2, '0');\r",
									"const formattedMinute = minute.toString().padStart(2, '0');\r",
									"\r",
									"// Combina hora e minuto em um horário\r",
									"const randomTime = `${formattedHour}:${formattedMinute}`;\r",
									"\r",
									"// Armazena o horário em uma variável de ambiente\r",
									"pm.environment.set(\"randomStartTime\", randomTime);\r",
									"\r",
									"// Função para gerar uma data aleatória entre duas datas\r",
									"function randomDate(start, end) {\r",
									"    const date = new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));\r",
									"    const day = date.getDate().toString().padStart(2, '0'); // Formata o dia com dois dígitos\r",
									"    const month = (date.getMonth() + 1).toString().padStart(2, '0'); // Formata o mês com dois dígitos\r",
									"    const year = date.getFullYear(); // Obtém o ano com quatro dígitos\r",
									"    return `${day}/${month}/${year}`; // Retorna a data formatada\r",
									"}\r",
									"\r",
									"// Define as datas de início e fim do intervalo\r",
									"const startDate = new Date('2024-01-01');\r",
									"const endDate = new Date('2024-12-31');\r",
									"\r",
									"// Gera uma data aleatória dentro do intervalo definido\r",
									"const generatedDate = randomDate(startDate, endDate);\r",
									"\r",
									"// Armazena a data gerada em uma variável de ambiente chamada `randomDate`\r",
									"pm.environment.set(\"randomDate\", generatedDate);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"{{$randomWord}}\",\r\n    \"lastName\": \"{{$randomWord}} {{$randomWord}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"phoneNumber\": \"33333333333\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{user_service_url}}",
							"host": [
								"{{user_service_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Cadastro com senha menor que o esperado",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code deve ser 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Deve validar a propriedade message\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property(\"message\");\r",
									"});\r",
									"\r",
									"pm.test(\"Deve validar a mensagem de retorno\", function () {\r",
									"    pm.expect(pm.response.text()).to.include((\"Senha deve ter pelo menos 8 caracteres\").toLowerCase());\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Gera uma hora aleatória entre 0 e 23\r",
									"const hour = Math.floor(Math.random() * 24);\r",
									"\r",
									"// Gera um minuto aleatório entre 0 e 59\r",
									"const minute = Math.floor(Math.random() * 60);\r",
									"\r",
									"// Formata a hora e o minuto para garantir que sempre tenham dois dígitos\r",
									"const formattedHour = hour.toString().padStart(2, '0');\r",
									"const formattedMinute = minute.toString().padStart(2, '0');\r",
									"\r",
									"// Combina hora e minuto em um horário\r",
									"const randomTime = `${formattedHour}:${formattedMinute}`;\r",
									"\r",
									"// Armazena o horário em uma variável de ambiente\r",
									"pm.environment.set(\"randomStartTime\", randomTime);\r",
									"\r",
									"// Função para gerar uma data aleatória entre duas datas\r",
									"function randomDate(start, end) {\r",
									"    const date = new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));\r",
									"    const day = date.getDate().toString().padStart(2, '0'); // Formata o dia com dois dígitos\r",
									"    const month = (date.getMonth() + 1).toString().padStart(2, '0'); // Formata o mês com dois dígitos\r",
									"    const year = date.getFullYear(); // Obtém o ano com quatro dígitos\r",
									"    return `${day}/${month}/${year}`; // Retorna a data formatada\r",
									"}\r",
									"\r",
									"// Define as datas de início e fim do intervalo\r",
									"const startDate = new Date('2024-01-01');\r",
									"const endDate = new Date('2024-12-31');\r",
									"\r",
									"// Gera uma data aleatória dentro do intervalo definido\r",
									"const generatedDate = randomDate(startDate, endDate);\r",
									"\r",
									"// Armazena a data gerada em uma variável de ambiente chamada `randomDate`\r",
									"pm.environment.set(\"randomDate\", generatedDate);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"{{$randomWord}}\",\r\n    \"lastName\": \"{{$randomWord}} {{$randomWord}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"phoneNumber\": \"33333333333\",\r\n    \"password\": \"@123\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{user_service_url}}",
							"host": [
								"{{user_service_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Cadastro com senha sem letra maiúscula",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code deve ser 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Deve validar a propriedade message\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property(\"message\");\r",
									"});\r",
									"\r",
									"pm.test(\"Deve validar a mensagem de retorno\", function () {\r",
									"    pm.expect(pm.response.text()).to.include((\"Senha deve ter pelo menos 8 caracteres, incluir uma letra maiúscula, um número e um caractere especial (!@#$&*)\").toLowerCase());\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Gera uma hora aleatória entre 0 e 23\r",
									"const hour = Math.floor(Math.random() * 24);\r",
									"\r",
									"// Gera um minuto aleatório entre 0 e 59\r",
									"const minute = Math.floor(Math.random() * 60);\r",
									"\r",
									"// Formata a hora e o minuto para garantir que sempre tenham dois dígitos\r",
									"const formattedHour = hour.toString().padStart(2, '0');\r",
									"const formattedMinute = minute.toString().padStart(2, '0');\r",
									"\r",
									"// Combina hora e minuto em um horário\r",
									"const randomTime = `${formattedHour}:${formattedMinute}`;\r",
									"\r",
									"// Armazena o horário em uma variável de ambiente\r",
									"pm.environment.set(\"randomStartTime\", randomTime);\r",
									"\r",
									"// Função para gerar uma data aleatória entre duas datas\r",
									"function randomDate(start, end) {\r",
									"    const date = new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));\r",
									"    const day = date.getDate().toString().padStart(2, '0'); // Formata o dia com dois dígitos\r",
									"    const month = (date.getMonth() + 1).toString().padStart(2, '0'); // Formata o mês com dois dígitos\r",
									"    const year = date.getFullYear(); // Obtém o ano com quatro dígitos\r",
									"    return `${day}/${month}/${year}`; // Retorna a data formatada\r",
									"}\r",
									"\r",
									"// Define as datas de início e fim do intervalo\r",
									"const startDate = new Date('2024-01-01');\r",
									"const endDate = new Date('2024-12-31');\r",
									"\r",
									"// Gera uma data aleatória dentro do intervalo definido\r",
									"const generatedDate = randomDate(startDate, endDate);\r",
									"\r",
									"// Armazena a data gerada em uma variável de ambiente chamada `randomDate`\r",
									"pm.environment.set(\"randomDate\", generatedDate);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"{{$randomWord}}\",\r\n    \"lastName\": \"{{$randomWord}} {{$randomWord}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"phoneNumber\": \"33333333333\",\r\n    \"password\": \"111111111111\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{user_service_url}}",
							"host": [
								"{{user_service_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Cadastro com senha sem número",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code deve ser 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Deve validar a propriedade message\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property(\"message\");\r",
									"});\r",
									"\r",
									"pm.test(\"Deve validar a mensagem de retorno\", function () {\r",
									"    pm.expect(pm.response.text()).to.include((\"Senha deve ter pelo menos 8 caracteres, incluir uma letra maiúscula, um número e um caractere especial (!@#$&*)\").toLowerCase());\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Gera uma hora aleatória entre 0 e 23\r",
									"const hour = Math.floor(Math.random() * 24);\r",
									"\r",
									"// Gera um minuto aleatório entre 0 e 59\r",
									"const minute = Math.floor(Math.random() * 60);\r",
									"\r",
									"// Formata a hora e o minuto para garantir que sempre tenham dois dígitos\r",
									"const formattedHour = hour.toString().padStart(2, '0');\r",
									"const formattedMinute = minute.toString().padStart(2, '0');\r",
									"\r",
									"// Combina hora e minuto em um horário\r",
									"const randomTime = `${formattedHour}:${formattedMinute}`;\r",
									"\r",
									"// Armazena o horário em uma variável de ambiente\r",
									"pm.environment.set(\"randomStartTime\", randomTime);\r",
									"\r",
									"// Função para gerar uma data aleatória entre duas datas\r",
									"function randomDate(start, end) {\r",
									"    const date = new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));\r",
									"    const day = date.getDate().toString().padStart(2, '0'); // Formata o dia com dois dígitos\r",
									"    const month = (date.getMonth() + 1).toString().padStart(2, '0'); // Formata o mês com dois dígitos\r",
									"    const year = date.getFullYear(); // Obtém o ano com quatro dígitos\r",
									"    return `${day}/${month}/${year}`; // Retorna a data formatada\r",
									"}\r",
									"\r",
									"// Define as datas de início e fim do intervalo\r",
									"const startDate = new Date('2024-01-01');\r",
									"const endDate = new Date('2024-12-31');\r",
									"\r",
									"// Gera uma data aleatória dentro do intervalo definido\r",
									"const generatedDate = randomDate(startDate, endDate);\r",
									"\r",
									"// Armazena a data gerada em uma variável de ambiente chamada `randomDate`\r",
									"pm.environment.set(\"randomDate\", generatedDate);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"{{$randomWord}}\",\r\n    \"lastName\": \"{{$randomWord}} {{$randomWord}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"phoneNumber\": \"33333333333\",\r\n    \"password\": \"{Password@!!#E\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{user_service_url}}",
							"host": [
								"{{user_service_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Cadastro com senha sem caractere especial",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code deve ser 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Deve validar a propriedade message\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property(\"message\");\r",
									"});\r",
									"\r",
									"pm.test(\"Deve validar a mensagem de retorno\", function () {\r",
									"    pm.expect(pm.response.text()).to.include((\"Senha deve ter pelo menos 8 caracteres, incluir uma letra maiúscula, um número e um caractere especial (!@#$&*)\").toLowerCase());\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Gera uma hora aleatória entre 0 e 23\r",
									"const hour = Math.floor(Math.random() * 24);\r",
									"\r",
									"// Gera um minuto aleatório entre 0 e 59\r",
									"const minute = Math.floor(Math.random() * 60);\r",
									"\r",
									"// Formata a hora e o minuto para garantir que sempre tenham dois dígitos\r",
									"const formattedHour = hour.toString().padStart(2, '0');\r",
									"const formattedMinute = minute.toString().padStart(2, '0');\r",
									"\r",
									"// Combina hora e minuto em um horário\r",
									"const randomTime = `${formattedHour}:${formattedMinute}`;\r",
									"\r",
									"// Armazena o horário em uma variável de ambiente\r",
									"pm.environment.set(\"randomStartTime\", randomTime);\r",
									"\r",
									"// Função para gerar uma data aleatória entre duas datas\r",
									"function randomDate(start, end) {\r",
									"    const date = new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));\r",
									"    const day = date.getDate().toString().padStart(2, '0'); // Formata o dia com dois dígitos\r",
									"    const month = (date.getMonth() + 1).toString().padStart(2, '0'); // Formata o mês com dois dígitos\r",
									"    const year = date.getFullYear(); // Obtém o ano com quatro dígitos\r",
									"    return `${day}/${month}/${year}`; // Retorna a data formatada\r",
									"}\r",
									"\r",
									"// Define as datas de início e fim do intervalo\r",
									"const startDate = new Date('2024-01-01');\r",
									"const endDate = new Date('2024-12-31');\r",
									"\r",
									"// Gera uma data aleatória dentro do intervalo definido\r",
									"const generatedDate = randomDate(startDate, endDate);\r",
									"\r",
									"// Armazena a data gerada em uma variável de ambiente chamada `randomDate`\r",
									"pm.environment.set(\"randomDate\", generatedDate);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"{{$randomWord}}\",\r\n    \"lastName\": \"{{$randomWord}} {{$randomWord}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"phoneNumber\": \"33333333333\",\r\n    \"password\": \"1WESsssrt23\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{user_service_url}}",
							"host": [
								"{{user_service_url}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Atualizar senha",
			"item": [
				{
					"name": "Alterar senha de um usuário valido",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code deve ser 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Deve validar a propriedade message\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property(\"message\");\r",
									"});\r",
									"\r",
									"pm.test(\"Deve validar a mensagem de retorno\", function () {\r",
									"    pm.expect(pm.response.text()).to.include((\"Senha atualizada com sucesso\"));\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"userRecentCadastrePassword\", \"{NewPass@123\")"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"{{userRecentCadastreEmail}}\",\r\n    \"newPassword\": \"{{userRecentCadastrePassword}}\",\r\n    \"recoveryCode\": \"{{recoveryCode}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{user_service_url}}/recuperacao/atualizar-senha",
							"host": [
								"{{user_service_url}}"
							],
							"path": [
								"recuperacao",
								"atualizar-senha"
							]
						}
					},
					"response": []
				},
				{
					"name": "Alterar senha de um usuário com senha fraca",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code deve ser 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Deve validar a propriedade message\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property(\"message\");\r",
									"});\r",
									"\r",
									"pm.test(\"Deve validar a mensagem de retorno\", function () {\r",
									"    pm.expect(pm.response.text()).to.include((\"senha deve ter pelo menos 8 caracteres, incluir uma letra maiúscula, um número e um caractere especial (!@#$&*)\"));\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Gera uma hora aleatória entre 0 e 23\r",
									"const hour = Math.floor(Math.random() * 24);\r",
									"\r",
									"// Gera um minuto aleatório entre 0 e 59\r",
									"const minute = Math.floor(Math.random() * 60);\r",
									"\r",
									"// Formata a hora e o minuto para garantir que sempre tenham dois dígitos\r",
									"const formattedHour = hour.toString().padStart(2, '0');\r",
									"const formattedMinute = minute.toString().padStart(2, '0');\r",
									"\r",
									"// Combina hora e minuto em um horário\r",
									"const randomTime = `${formattedHour}:${formattedMinute}`;\r",
									"\r",
									"// Armazena o horário em uma variável de ambiente\r",
									"pm.environment.set(\"randomStartTime\", randomTime);\r",
									"\r",
									"// Função para gerar uma data aleatória entre duas datas\r",
									"function randomDate(start, end) {\r",
									"    const date = new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));\r",
									"    const day = date.getDate().toString().padStart(2, '0'); // Formata o dia com dois dígitos\r",
									"    const month = (date.getMonth() + 1).toString().padStart(2, '0'); // Formata o mês com dois dígitos\r",
									"    const year = date.getFullYear(); // Obtém o ano com quatro dígitos\r",
									"    return `${day}/${month}/${year}`; // Retorna a data formatada\r",
									"}\r",
									"\r",
									"// Define as datas de início e fim do intervalo\r",
									"const startDate = new Date('2024-01-01');\r",
									"const endDate = new Date('2024-12-31');\r",
									"\r",
									"// Gera uma data aleatória dentro do intervalo definido\r",
									"const generatedDate = randomDate(startDate, endDate);\r",
									"\r",
									"// Armazena a data gerada em uma variável de ambiente chamada `randomDate`\r",
									"pm.environment.set(\"randomDate\", generatedDate);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"lucasm241301@gmail.com\",\r\n    \"newPassword\": \"@03#\",\r\n    \"recoveryCode\": \"oFnEK9\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{user_service_url}}/recuperacao/atualizar-senha",
							"host": [
								"{{user_service_url}}"
							],
							"path": [
								"recuperacao",
								"atualizar-senha"
							]
						}
					},
					"response": []
				},
				{
					"name": "Alterar senha de um usuário com código expirado",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code deve ser 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Deve validar a propriedade message\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property(\"message\");\r",
									"});\r",
									"\r",
									"pm.test(\"Deve validar a mensagem de retorno\", function () {\r",
									"    const responseText = pm.response.text();\r",
									"    pm.expect(responseText).to.satisfy(text => \r",
									"        text.includes(\"Código de recuperação expirado\".toLowerCase()) || text.includes(\"Código de recuperação inválido\".toLowerCase()),\r",
									"        \"Mensagem de erro esperada não encontrada na resposta\"\r",
									"    );\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"{{userRecentCadastreEmail}}\",\r\n    \"newPassword\": \"{{userRecentCadastrePassword}}\",\r\n    \"recoveryCode\": \"oFnEK9\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{user_service_url}}/recuperacao/atualizar-senha",
							"host": [
								"{{user_service_url}}"
							],
							"path": [
								"recuperacao",
								"atualizar-senha"
							]
						}
					},
					"response": []
				},
				{
					"name": "Alterar senha de um usuário com email invalido",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code deve ser 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Deve validar a propriedade message\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property(\"message\");\r",
									"});\r",
									"\r",
									"pm.test(\"Deve validar a mensagem de retorno\", function () {\r",
									"    pm.expect(pm.response.text()).to.include((\"Email deve ser um email válido\").toLowerCase());\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Gera uma hora aleatória entre 0 e 23\r",
									"const hour = Math.floor(Math.random() * 24);\r",
									"\r",
									"// Gera um minuto aleatório entre 0 e 59\r",
									"const minute = Math.floor(Math.random() * 60);\r",
									"\r",
									"// Formata a hora e o minuto para garantir que sempre tenham dois dígitos\r",
									"const formattedHour = hour.toString().padStart(2, '0');\r",
									"const formattedMinute = minute.toString().padStart(2, '0');\r",
									"\r",
									"// Combina hora e minuto em um horário\r",
									"const randomTime = `${formattedHour}:${formattedMinute}`;\r",
									"\r",
									"// Armazena o horário em uma variável de ambiente\r",
									"pm.environment.set(\"randomStartTime\", randomTime);\r",
									"\r",
									"// Função para gerar uma data aleatória entre duas datas\r",
									"function randomDate(start, end) {\r",
									"    const date = new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));\r",
									"    const day = date.getDate().toString().padStart(2, '0'); // Formata o dia com dois dígitos\r",
									"    const month = (date.getMonth() + 1).toString().padStart(2, '0'); // Formata o mês com dois dígitos\r",
									"    const year = date.getFullYear(); // Obtém o ano com quatro dígitos\r",
									"    return `${day}/${month}/${year}`; // Retorna a data formatada\r",
									"}\r",
									"\r",
									"// Define as datas de início e fim do intervalo\r",
									"const startDate = new Date('2024-01-01');\r",
									"const endDate = new Date('2024-12-31');\r",
									"\r",
									"// Gera uma data aleatória dentro do intervalo definido\r",
									"const generatedDate = randomDate(startDate, endDate);\r",
									"\r",
									"// Armazena a data gerada em uma variável de ambiente chamada `randomDate`\r",
									"pm.environment.set(\"randomDate\", generatedDate);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"lucasm2413ail.com\",\r\n    \"newPassword\": \"@JMKIoowD03#\",\r\n    \"recoveryCode\": \"oFnEK9\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{user_service_url}}/recuperacao/atualizar-senha",
							"host": [
								"{{user_service_url}}"
							],
							"path": [
								"recuperacao",
								"atualizar-senha"
							]
						}
					},
					"response": []
				},
				{
					"name": "Alterar senha de um usuário sem passar recoveryCode",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code deve ser 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Deve validar a propriedade message\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property(\"message\");\r",
									"});\r",
									"\r",
									"pm.test(\"Deve validar a mensagem de retorno\", function () {\r",
									"    pm.expect(pm.response.text()).to.include((\"Recoverycode é obrigatório\").toLowerCase());\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Gera uma hora aleatória entre 0 e 23\r",
									"const hour = Math.floor(Math.random() * 24);\r",
									"\r",
									"// Gera um minuto aleatório entre 0 e 59\r",
									"const minute = Math.floor(Math.random() * 60);\r",
									"\r",
									"// Formata a hora e o minuto para garantir que sempre tenham dois dígitos\r",
									"const formattedHour = hour.toString().padStart(2, '0');\r",
									"const formattedMinute = minute.toString().padStart(2, '0');\r",
									"\r",
									"// Combina hora e minuto em um horário\r",
									"const randomTime = `${formattedHour}:${formattedMinute}`;\r",
									"\r",
									"// Armazena o horário em uma variável de ambiente\r",
									"pm.environment.set(\"randomStartTime\", randomTime);\r",
									"\r",
									"// Função para gerar uma data aleatória entre duas datas\r",
									"function randomDate(start, end) {\r",
									"    const date = new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));\r",
									"    const day = date.getDate().toString().padStart(2, '0'); // Formata o dia com dois dígitos\r",
									"    const month = (date.getMonth() + 1).toString().padStart(2, '0'); // Formata o mês com dois dígitos\r",
									"    const year = date.getFullYear(); // Obtém o ano com quatro dígitos\r",
									"    return `${day}/${month}/${year}`; // Retorna a data formatada\r",
									"}\r",
									"\r",
									"// Define as datas de início e fim do intervalo\r",
									"const startDate = new Date('2024-01-01');\r",
									"const endDate = new Date('2024-12-31');\r",
									"\r",
									"// Gera uma data aleatória dentro do intervalo definido\r",
									"const generatedDate = randomDate(startDate, endDate);\r",
									"\r",
									"// Armazena a data gerada em uma variável de ambiente chamada `randomDate`\r",
									"pm.environment.set(\"randomDate\", generatedDate);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"lucasm241301@gmail.com\",\r\n    \"newPassword\": \"@JMKIoowD03#\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{user_service_url}}/recuperacao/atualizar-senha",
							"host": [
								"{{user_service_url}}"
							],
							"path": [
								"recuperacao",
								"atualizar-senha"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							"pm.sendRequest({\r",
							"    url: pm.environment.get(\"email_service_url\") + \"/send-recovery-code\",\r",
							"    method: \"POST\",\r",
							"    header: {\r",
							"        \"Content-Type\": \"application/json\"\r",
							"    },\r",
							"    body: {\r",
							"        mode: \"raw\",\r",
							"        raw: JSON.stringify({\r",
							"            email: pm.environment.get(\"userRecentCadastreEmail\")\r",
							"        })\r",
							"    }\r",
							"}, function (err, res) {\r",
							"        if (!err) {\r",
							"            console.log(res.json())\r",
							"            pm.environment.set(\"recoveryCode\", res.json().recoveryCode);\r",
							"        } else {\r",
							"            console.log(\"Erro ao obter código de recuperação:\", err);\r",
							"        }\r",
							"});"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Editar usuário",
			"item": [
				{
					"name": "Editar dados básicos do usuário valido",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code deve ser 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Deve validar a propriedade message\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property(\"message\");\r",
									"});\r",
									"\r",
									"pm.test(\"Deve validar a mensagem de retorno\", function () {\r",
									"    pm.expect(pm.response.text()).to.include((\"Usuário atualizado com sucesso\"));\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Gera uma hora aleatória entre 0 e 23\r",
									"const hour = Math.floor(Math.random() * 24);\r",
									"\r",
									"// Gera um minuto aleatório entre 0 e 59\r",
									"const minute = Math.floor(Math.random() * 60);\r",
									"\r",
									"// Formata a hora e o minuto para garantir que sempre tenham dois dígitos\r",
									"const formattedHour = hour.toString().padStart(2, '0');\r",
									"const formattedMinute = minute.toString().padStart(2, '0');\r",
									"\r",
									"// Combina hora e minuto em um horário\r",
									"const randomTime = `${formattedHour}:${formattedMinute}`;\r",
									"\r",
									"// Armazena o horário em uma variável de ambiente\r",
									"pm.environment.set(\"randomStartTime\", randomTime);\r",
									"\r",
									"// Função para gerar uma data aleatória entre duas datas\r",
									"function randomDate(start, end) {\r",
									"    const date = new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));\r",
									"    const day = date.getDate().toString().padStart(2, '0'); // Formata o dia com dois dígitos\r",
									"    const month = (date.getMonth() + 1).toString().padStart(2, '0'); // Formata o mês com dois dígitos\r",
									"    const year = date.getFullYear(); // Obtém o ano com quatro dígitos\r",
									"    return `${day}/${month}/${year}`; // Retorna a data formatada\r",
									"}\r",
									"\r",
									"// Define as datas de início e fim do intervalo\r",
									"const startDate = new Date('2024-01-01');\r",
									"const endDate = new Date('2024-12-31');\r",
									"\r",
									"// Gera uma data aleatória dentro do intervalo definido\r",
									"const generatedDate = randomDate(startDate, endDate);\r",
									"\r",
									"// Armazena a data gerada em uma variável de ambiente chamada `randomDate`\r",
									"pm.environment.set(\"randomDate\", generatedDate);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{userRecentCadastreToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"{{$randomWord}}\",\r\n    \"lastName\": \"{{$randomWord}} {{$randomWord}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"phoneNumber\": \"33333333333\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{user_service_url}}?userId={{userRecentCadastreId}}",
							"host": [
								"{{user_service_url}}"
							],
							"query": [
								{
									"key": "userId",
									"value": "{{userRecentCadastreId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Editar dados básicos do usuário com email já cadastrado",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code deve ser 409\", function () {\r",
									"    pm.response.to.have.status(409);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Deve validar a propriedade message\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property(\"message\");\r",
									"});\r",
									"\r",
									"pm.test(\"Deve validar a mensagem de retorno\", function () {\r",
									"    pm.expect(pm.response.text()).to.include((\"Este e-mail já está cadastrado\"));\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Gera uma hora aleatória entre 0 e 23\r",
									"const hour = Math.floor(Math.random() * 24);\r",
									"\r",
									"// Gera um minuto aleatório entre 0 e 59\r",
									"const minute = Math.floor(Math.random() * 60);\r",
									"\r",
									"// Formata a hora e o minuto para garantir que sempre tenham dois dígitos\r",
									"const formattedHour = hour.toString().padStart(2, '0');\r",
									"const formattedMinute = minute.toString().padStart(2, '0');\r",
									"\r",
									"// Combina hora e minuto em um horário\r",
									"const randomTime = `${formattedHour}:${formattedMinute}`;\r",
									"\r",
									"// Armazena o horário em uma variável de ambiente\r",
									"pm.environment.set(\"randomStartTime\", randomTime);\r",
									"\r",
									"// Função para gerar uma data aleatória entre duas datas\r",
									"function randomDate(start, end) {\r",
									"    const date = new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));\r",
									"    const day = date.getDate().toString().padStart(2, '0'); // Formata o dia com dois dígitos\r",
									"    const month = (date.getMonth() + 1).toString().padStart(2, '0'); // Formata o mês com dois dígitos\r",
									"    const year = date.getFullYear(); // Obtém o ano com quatro dígitos\r",
									"    return `${day}/${month}/${year}`; // Retorna a data formatada\r",
									"}\r",
									"\r",
									"// Define as datas de início e fim do intervalo\r",
									"const startDate = new Date('2024-01-01');\r",
									"const endDate = new Date('2024-12-31');\r",
									"\r",
									"// Gera uma data aleatória dentro do intervalo definido\r",
									"const generatedDate = randomDate(startDate, endDate);\r",
									"\r",
									"// Armazena a data gerada em uma variável de ambiente chamada `randomDate`\r",
									"pm.environment.set(\"randomDate\", generatedDate);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{userRecentCadastreToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"{{$randomWord}}\",\r\n    \"lastName\": \"{{$randomWord}} {{$randomWord}}\",\r\n    \"email\": \"lucasm241301@gmail.com\",\r\n    \"phoneNumber\": \"33333333333\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{user_service_url}}?userId={{userRecentCadastreId}}",
							"host": [
								"{{user_service_url}}"
							],
							"query": [
								{
									"key": "userId",
									"value": "{{userRecentCadastreId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Editar dados básicos do usuário sem informar id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code deve ser 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Deve validar a propriedade message\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property(\"message\");\r",
									"});\r",
									"\r",
									"pm.test(\"Deve validar a mensagem de retorno\", function () {\r",
									"    pm.expect(pm.response.text()).to.include((\"O ID não pode ser vazio\").toLowerCase());\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Gera uma hora aleatória entre 0 e 23\r",
									"const hour = Math.floor(Math.random() * 24);\r",
									"\r",
									"// Gera um minuto aleatório entre 0 e 59\r",
									"const minute = Math.floor(Math.random() * 60);\r",
									"\r",
									"// Formata a hora e o minuto para garantir que sempre tenham dois dígitos\r",
									"const formattedHour = hour.toString().padStart(2, '0');\r",
									"const formattedMinute = minute.toString().padStart(2, '0');\r",
									"\r",
									"// Combina hora e minuto em um horário\r",
									"const randomTime = `${formattedHour}:${formattedMinute}`;\r",
									"\r",
									"// Armazena o horário em uma variável de ambiente\r",
									"pm.environment.set(\"randomStartTime\", randomTime);\r",
									"\r",
									"// Função para gerar uma data aleatória entre duas datas\r",
									"function randomDate(start, end) {\r",
									"    const date = new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));\r",
									"    const day = date.getDate().toString().padStart(2, '0'); // Formata o dia com dois dígitos\r",
									"    const month = (date.getMonth() + 1).toString().padStart(2, '0'); // Formata o mês com dois dígitos\r",
									"    const year = date.getFullYear(); // Obtém o ano com quatro dígitos\r",
									"    return `${day}/${month}/${year}`; // Retorna a data formatada\r",
									"}\r",
									"\r",
									"// Define as datas de início e fim do intervalo\r",
									"const startDate = new Date('2024-01-01');\r",
									"const endDate = new Date('2024-12-31');\r",
									"\r",
									"// Gera uma data aleatória dentro do intervalo definido\r",
									"const generatedDate = randomDate(startDate, endDate);\r",
									"\r",
									"// Armazena a data gerada em uma variável de ambiente chamada `randomDate`\r",
									"pm.environment.set(\"randomDate\", generatedDate);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{userRecentCadastreToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"{{$randomWord}}\",\r\n    \"lastName\": \"{{$randomWord}} {{$randomWord}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"phoneNumber\": \"33333333333\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{user_service_url}}?userId=",
							"host": [
								"{{user_service_url}}"
							],
							"query": [
								{
									"key": "userId",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Editar dados básicos do usuário invalido",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code deve ser 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Deve validar a propriedade message\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property(\"message\");\r",
									"});\r",
									"\r",
									"pm.test(\"Deve validar a mensagem de retorno\", function () {\r",
									"    pm.expect(pm.response.text()).to.include((\"O ID deve estar no formato de UUID v4\").toLowerCase());\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Gera uma hora aleatória entre 0 e 23\r",
									"const hour = Math.floor(Math.random() * 24);\r",
									"\r",
									"// Gera um minuto aleatório entre 0 e 59\r",
									"const minute = Math.floor(Math.random() * 60);\r",
									"\r",
									"// Formata a hora e o minuto para garantir que sempre tenham dois dígitos\r",
									"const formattedHour = hour.toString().padStart(2, '0');\r",
									"const formattedMinute = minute.toString().padStart(2, '0');\r",
									"\r",
									"// Combina hora e minuto em um horário\r",
									"const randomTime = `${formattedHour}:${formattedMinute}`;\r",
									"\r",
									"// Armazena o horário em uma variável de ambiente\r",
									"pm.environment.set(\"randomStartTime\", randomTime);\r",
									"\r",
									"// Função para gerar uma data aleatória entre duas datas\r",
									"function randomDate(start, end) {\r",
									"    const date = new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));\r",
									"    const day = date.getDate().toString().padStart(2, '0'); // Formata o dia com dois dígitos\r",
									"    const month = (date.getMonth() + 1).toString().padStart(2, '0'); // Formata o mês com dois dígitos\r",
									"    const year = date.getFullYear(); // Obtém o ano com quatro dígitos\r",
									"    return `${day}/${month}/${year}`; // Retorna a data formatada\r",
									"}\r",
									"\r",
									"// Define as datas de início e fim do intervalo\r",
									"const startDate = new Date('2024-01-01');\r",
									"const endDate = new Date('2024-12-31');\r",
									"\r",
									"// Gera uma data aleatória dentro do intervalo definido\r",
									"const generatedDate = randomDate(startDate, endDate);\r",
									"\r",
									"// Armazena a data gerada em uma variável de ambiente chamada `randomDate`\r",
									"pm.environment.set(\"randomDate\", generatedDate);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{userRecentCadastreToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"{{$randomWord}}\",\r\n    \"lastName\": \"{{$randomWord}} {{$randomWord}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"phoneNumber\": \"33333333333\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{user_service_url}}?userId=6128427",
							"host": [
								"{{user_service_url}}"
							],
							"query": [
								{
									"key": "userId",
									"value": "6128427"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Buscar usuário",
			"item": [
				{
					"name": "Buscar usuário por ID valido",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code deve ser 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Deve validar a propriedade userId\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property(\"userId\")\r",
									"});\r",
									"\r",
									"pm.test(\"Deve validar a propriedade firstName\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property(\"firstName\")\r",
									"});\r",
									"\r",
									"pm.test(\"Deve validar a propriedade lastName\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property(\"lastName\")\r",
									"});\r",
									"\r",
									"pm.test(\"Deve validar a propriedade email\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property(\"email\")\r",
									"});\r",
									"\r",
									"pm.test(\"Deve validar a propriedade phoneNumber\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property(\"phoneNumber\")\r",
									"});\r",
									"\r",
									"pm.test(\"Deve validar a propriedade role\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property(\"role\")\r",
									"});\r",
									"\r",
									"pm.test(\"Deve validar a propriedade roleId em role\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property(\"role\").to.have.property(\"roleId\")\r",
									"});\r",
									"\r",
									"pm.test(\"Deve validar a propriedade roleName em role\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property(\"role\").to.have.property(\"roleName\")\r",
									"});\r",
									"\r",
									"pm.test(\"Deve validar a propriedade roleDescription em role\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property(\"role\").to.have.property(\"roleDescription\")\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{userRecentCadastreToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{user_service_url}}?userId={{userRecentCadastreId}}",
							"host": [
								"{{user_service_url}}"
							],
							"query": [
								{
									"key": "userId",
									"value": "{{userRecentCadastreId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Buscar usuário por ID invalido",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code deve ser 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Deve validar a propriedade message\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property(\"message\");\r",
									"});\r",
									"\r",
									"pm.test(\"Deve validar a mensagem de retorno\", function () {\r",
									"    pm.expect(pm.response.text()).to.include((\"O ID deve estar no formato de UUID v4\").toLowerCase());\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{userRecentCadastreToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{user_service_url}}?userId=b59",
							"host": [
								"{{user_service_url}}"
							],
							"query": [
								{
									"key": "userId",
									"value": "b59"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Buscar usuário inexistente",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code deve ser 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Deve validar a propriedade message\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property(\"message\");\r",
									"});\r",
									"\r",
									"pm.test(\"Deve validar a mensagem de retorno\", function () {\r",
									"    pm.expect(pm.response.text()).to.include((\"Usuário não encontrado\"));\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{userRecentCadastreToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{user_service_url}}?userId=be589efe-67e3-4042-8aa7-700a043e142d",
							"host": [
								"{{user_service_url}}"
							],
							"query": [
								{
									"key": "userId",
									"value": "be589efe-67e3-4042-8aa7-700a043e142d"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Buscar usuário por ID não informado",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code deve ser 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Deve validar a propriedade message\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property(\"message\");\r",
									"});\r",
									"\r",
									"pm.test(\"Deve validar a mensagem de retorno\", function () {\r",
									"    pm.expect(pm.response.text()).to.include((\"Informe um userId ou userEmail para a busca\"));\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{userRecentCadastreToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{user_service_url}}?userId=",
							"host": [
								"{{user_service_url}}"
							],
							"query": [
								{
									"key": "userId",
									"value": ""
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Validação das credenciais de usuário",
			"item": [
				{
					"name": "Validar credenciais com email invalido",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code deve ser 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Deve validar a propriedade message\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property(\"message\");\r",
									"});\r",
									"\r",
									"pm.test(\"Deve validar a mensagem de retorno\", function () {\r",
									"    pm.expect(pm.response.text()).to.include((\"Email deve ser um email válido\").toLocaleLowerCase());\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Gera uma hora aleatória entre 0 e 23\r",
									"const hour = Math.floor(Math.random() * 24);\r",
									"\r",
									"// Gera um minuto aleatório entre 0 e 59\r",
									"const minute = Math.floor(Math.random() * 60);\r",
									"\r",
									"// Formata a hora e o minuto para garantir que sempre tenham dois dígitos\r",
									"const formattedHour = hour.toString().padStart(2, '0');\r",
									"const formattedMinute = minute.toString().padStart(2, '0');\r",
									"\r",
									"// Combina hora e minuto em um horário\r",
									"const randomTime = `${formattedHour}:${formattedMinute}`;\r",
									"\r",
									"// Armazena o horário em uma variável de ambiente\r",
									"pm.environment.set(\"randomStartTime\", randomTime);\r",
									"\r",
									"// Função para gerar uma data aleatória entre duas datas\r",
									"function randomDate(start, end) {\r",
									"    const date = new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));\r",
									"    const day = date.getDate().toString().padStart(2, '0'); // Formata o dia com dois dígitos\r",
									"    const month = (date.getMonth() + 1).toString().padStart(2, '0'); // Formata o mês com dois dígitos\r",
									"    const year = date.getFullYear(); // Obtém o ano com quatro dígitos\r",
									"    return `${day}/${month}/${year}`; // Retorna a data formatada\r",
									"}\r",
									"\r",
									"// Define as datas de início e fim do intervalo\r",
									"const startDate = new Date('2024-01-01');\r",
									"const endDate = new Date('2024-12-31');\r",
									"\r",
									"// Gera uma data aleatória dentro do intervalo definido\r",
									"const generatedDate = randomDate(startDate, endDate);\r",
									"\r",
									"// Armazena a data gerada em uma variável de ambiente chamada `randomDate`\r",
									"pm.environment.set(\"randomDate\", generatedDate);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"userEmail\": \"lucasm241301.com\",\r\n    \"passwordProvided\": \"U&*850802uhye\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{user_service_url}}/validate-credentials",
							"host": [
								"{{user_service_url}}"
							],
							"path": [
								"validate-credentials"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validar credenciais corretas",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code deve ser 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Deve validar a propriedade userId\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property(\"userId\");\r",
									"});\r",
									"\r",
									"pm.test(\"Deve validar a propriedade userEmail\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property(\"userEmail\");\r",
									"});\r",
									"\r",
									"pm.test(\"Deve validar a propriedade roleName\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property(\"roleName\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Gera uma hora aleatória entre 0 e 23\r",
									"const hour = Math.floor(Math.random() * 24);\r",
									"\r",
									"// Gera um minuto aleatório entre 0 e 59\r",
									"const minute = Math.floor(Math.random() * 60);\r",
									"\r",
									"// Formata a hora e o minuto para garantir que sempre tenham dois dígitos\r",
									"const formattedHour = hour.toString().padStart(2, '0');\r",
									"const formattedMinute = minute.toString().padStart(2, '0');\r",
									"\r",
									"// Combina hora e minuto em um horário\r",
									"const randomTime = `${formattedHour}:${formattedMinute}`;\r",
									"\r",
									"// Armazena o horário em uma variável de ambiente\r",
									"pm.environment.set(\"randomStartTime\", randomTime);\r",
									"\r",
									"// Função para gerar uma data aleatória entre duas datas\r",
									"function randomDate(start, end) {\r",
									"    const date = new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));\r",
									"    const day = date.getDate().toString().padStart(2, '0'); // Formata o dia com dois dígitos\r",
									"    const month = (date.getMonth() + 1).toString().padStart(2, '0'); // Formata o mês com dois dígitos\r",
									"    const year = date.getFullYear(); // Obtém o ano com quatro dígitos\r",
									"    return `${day}/${month}/${year}`; // Retorna a data formatada\r",
									"}\r",
									"\r",
									"// Define as datas de início e fim do intervalo\r",
									"const startDate = new Date('2024-01-01');\r",
									"const endDate = new Date('2024-12-31');\r",
									"\r",
									"// Gera uma data aleatória dentro do intervalo definido\r",
									"const generatedDate = randomDate(startDate, endDate);\r",
									"\r",
									"// Armazena a data gerada em uma variável de ambiente chamada `randomDate`\r",
									"pm.environment.set(\"randomDate\", generatedDate);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"userEmail\": \"louisa_casper48@hotmail.com\",\r\n    \"passwordProvided\": \"{Password@123\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{user_service_url}}/validate-credentials",
							"host": [
								"{{user_service_url}}"
							],
							"path": [
								"validate-credentials"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validar credenciais de usuário com email não cadastrado",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code deve ser 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Deve validar a propriedade message\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property(\"message\");\r",
									"});\r",
									"\r",
									"pm.test(\"Deve validar a mensagem de retorno\", function () {\r",
									"    pm.expect(pm.response.text()).to.include((\"Nenhum usuário encontrado com este email\"));\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Gera uma hora aleatória entre 0 e 23\r",
									"const hour = Math.floor(Math.random() * 24);\r",
									"\r",
									"// Gera um minuto aleatório entre 0 e 59\r",
									"const minute = Math.floor(Math.random() * 60);\r",
									"\r",
									"// Formata a hora e o minuto para garantir que sempre tenham dois dígitos\r",
									"const formattedHour = hour.toString().padStart(2, '0');\r",
									"const formattedMinute = minute.toString().padStart(2, '0');\r",
									"\r",
									"// Combina hora e minuto em um horário\r",
									"const randomTime = `${formattedHour}:${formattedMinute}`;\r",
									"\r",
									"// Armazena o horário em uma variável de ambiente\r",
									"pm.environment.set(\"randomStartTime\", randomTime);\r",
									"\r",
									"// Função para gerar uma data aleatória entre duas datas\r",
									"function randomDate(start, end) {\r",
									"    const date = new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));\r",
									"    const day = date.getDate().toString().padStart(2, '0'); // Formata o dia com dois dígitos\r",
									"    const month = (date.getMonth() + 1).toString().padStart(2, '0'); // Formata o mês com dois dígitos\r",
									"    const year = date.getFullYear(); // Obtém o ano com quatro dígitos\r",
									"    return `${day}/${month}/${year}`; // Retorna a data formatada\r",
									"}\r",
									"\r",
									"// Define as datas de início e fim do intervalo\r",
									"const startDate = new Date('2024-01-01');\r",
									"const endDate = new Date('2024-12-31');\r",
									"\r",
									"// Gera uma data aleatória dentro do intervalo definido\r",
									"const generatedDate = randomDate(startDate, endDate);\r",
									"\r",
									"// Armazena a data gerada em uma variável de ambiente chamada `randomDate`\r",
									"pm.environment.set(\"randomDate\", generatedDate);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"userEmail\": \"carlosdasilva@example.com\",\r\n    \"passwordProvided\": \"@JMKIoowD03#\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{user_service_url}}/validate-credentials",
							"host": [
								"{{user_service_url}}"
							],
							"path": [
								"validate-credentials"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validar credenciais incorretas",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code deve ser 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Deve validar a propriedade message\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property(\"message\");\r",
									"});\r",
									"\r",
									"pm.test(\"Deve validar a mensagem de retorno\", function () {\r",
									"    pm.expect(pm.response.text()).to.include((\"Credenciais inválidas\"));\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Gera uma hora aleatória entre 0 e 23\r",
									"const hour = Math.floor(Math.random() * 24);\r",
									"\r",
									"// Gera um minuto aleatório entre 0 e 59\r",
									"const minute = Math.floor(Math.random() * 60);\r",
									"\r",
									"// Formata a hora e o minuto para garantir que sempre tenham dois dígitos\r",
									"const formattedHour = hour.toString().padStart(2, '0');\r",
									"const formattedMinute = minute.toString().padStart(2, '0');\r",
									"\r",
									"// Combina hora e minuto em um horário\r",
									"const randomTime = `${formattedHour}:${formattedMinute}`;\r",
									"\r",
									"// Armazena o horário em uma variável de ambiente\r",
									"pm.environment.set(\"randomStartTime\", randomTime);\r",
									"\r",
									"// Função para gerar uma data aleatória entre duas datas\r",
									"function randomDate(start, end) {\r",
									"    const date = new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));\r",
									"    const day = date.getDate().toString().padStart(2, '0'); // Formata o dia com dois dígitos\r",
									"    const month = (date.getMonth() + 1).toString().padStart(2, '0'); // Formata o mês com dois dígitos\r",
									"    const year = date.getFullYear(); // Obtém o ano com quatro dígitos\r",
									"    return `${day}/${month}/${year}`; // Retorna a data formatada\r",
									"}\r",
									"\r",
									"// Define as datas de início e fim do intervalo\r",
									"const startDate = new Date('2024-01-01');\r",
									"const endDate = new Date('2024-12-31');\r",
									"\r",
									"// Gera uma data aleatória dentro do intervalo definido\r",
									"const generatedDate = randomDate(startDate, endDate);\r",
									"\r",
									"// Armazena a data gerada em uma variável de ambiente chamada `randomDate`\r",
									"pm.environment.set(\"randomDate\", generatedDate);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"userEmail\": \"louisa_casper48@hotmail.com\",\r\n    \"passwordProvided\": \"{2324124@123\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{user_service_url}}/validate-credentials",
							"host": [
								"{{user_service_url}}"
							],
							"path": [
								"validate-credentials"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Atualizar permissão de usuário",
			"item": [
				{
					"name": "Atualizar permissão de usuário",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code deve ser 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Gera uma hora aleatória entre 0 e 23\r",
									"const hour = Math.floor(Math.random() * 24);\r",
									"\r",
									"// Gera um minuto aleatório entre 0 e 59\r",
									"const minute = Math.floor(Math.random() * 60);\r",
									"\r",
									"// Formata a hora e o minuto para garantir que sempre tenham dois dígitos\r",
									"const formattedHour = hour.toString().padStart(2, '0');\r",
									"const formattedMinute = minute.toString().padStart(2, '0');\r",
									"\r",
									"// Combina hora e minuto em um horário\r",
									"const randomTime = `${formattedHour}:${formattedMinute}`;\r",
									"\r",
									"// Armazena o horário em uma variável de ambiente\r",
									"pm.environment.set(\"randomStartTime\", randomTime);\r",
									"\r",
									"// Função para gerar uma data aleatória entre duas datas\r",
									"function randomDate(start, end) {\r",
									"    const date = new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));\r",
									"    const day = date.getDate().toString().padStart(2, '0'); // Formata o dia com dois dígitos\r",
									"    const month = (date.getMonth() + 1).toString().padStart(2, '0'); // Formata o mês com dois dígitos\r",
									"    const year = date.getFullYear(); // Obtém o ano com quatro dígitos\r",
									"    return `${day}/${month}/${year}`; // Retorna a data formatada\r",
									"}\r",
									"\r",
									"// Define as datas de início e fim do intervalo\r",
									"const startDate = new Date('2024-01-01');\r",
									"const endDate = new Date('2024-12-31');\r",
									"\r",
									"// Gera uma data aleatória dentro do intervalo definido\r",
									"const generatedDate = randomDate(startDate, endDate);\r",
									"\r",
									"// Armazena a data gerada em uma variável de ambiente chamada `randomDate`\r",
									"pm.environment.set(\"randomDate\", generatedDate);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"newRole\": \"Admin\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{user_service_url}}/update-role-user?userId={{userRecentCadastreId}}",
							"host": [
								"{{user_service_url}}"
							],
							"path": [
								"update-role-user"
							],
							"query": [
								{
									"key": "userId",
									"value": "{{userRecentCadastreId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Atualizar permissão de usuário com sua permissão atual",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code deve ser 409\", function () {\r",
									"    pm.response.to.have.status(409);\r",
									"});\r",
									"\r",
									"pm.test(\"Deve validar a propriedade message\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property(\"message\");\r",
									"});\r",
									"\r",
									"pm.test(\"Deve validar a mensagem de retorno\", function () {\r",
									"    pm.expect(pm.response.text()).to.include((\"já possui a permissão\"));\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Gera uma hora aleatória entre 0 e 23\r",
									"const hour = Math.floor(Math.random() * 24);\r",
									"\r",
									"// Gera um minuto aleatório entre 0 e 59\r",
									"const minute = Math.floor(Math.random() * 60);\r",
									"\r",
									"// Formata a hora e o minuto para garantir que sempre tenham dois dígitos\r",
									"const formattedHour = hour.toString().padStart(2, '0');\r",
									"const formattedMinute = minute.toString().padStart(2, '0');\r",
									"\r",
									"// Combina hora e minuto em um horário\r",
									"const randomTime = `${formattedHour}:${formattedMinute}`;\r",
									"\r",
									"// Armazena o horário em uma variável de ambiente\r",
									"pm.environment.set(\"randomStartTime\", randomTime);\r",
									"\r",
									"// Função para gerar uma data aleatória entre duas datas\r",
									"function randomDate(start, end) {\r",
									"    const date = new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));\r",
									"    const day = date.getDate().toString().padStart(2, '0'); // Formata o dia com dois dígitos\r",
									"    const month = (date.getMonth() + 1).toString().padStart(2, '0'); // Formata o mês com dois dígitos\r",
									"    const year = date.getFullYear(); // Obtém o ano com quatro dígitos\r",
									"    return `${day}/${month}/${year}`; // Retorna a data formatada\r",
									"}\r",
									"\r",
									"// Define as datas de início e fim do intervalo\r",
									"const startDate = new Date('2024-01-01');\r",
									"const endDate = new Date('2024-12-31');\r",
									"\r",
									"// Gera uma data aleatória dentro do intervalo definido\r",
									"const generatedDate = randomDate(startDate, endDate);\r",
									"\r",
									"// Armazena a data gerada em uma variável de ambiente chamada `randomDate`\r",
									"pm.environment.set(\"randomDate\", generatedDate);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"newRole\": \"Admin\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{user_service_url}}/update-role-user?userId=bac0f194-5663-4150-82cd-6561a1e2499e",
							"host": [
								"{{user_service_url}}"
							],
							"path": [
								"update-role-user"
							],
							"query": [
								{
									"key": "userId",
									"value": "bac0f194-5663-4150-82cd-6561a1e2499e"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Deletar usuário",
			"item": [
				{
					"name": "Deletar usuário existente",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code deve ser 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{userRecentCadastreToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{user_service_url}}?userId={{userRecentCadastreId}}",
							"host": [
								"{{user_service_url}}"
							],
							"query": [
								{
									"key": "userId",
									"value": "{{userRecentCadastreId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Deletar usuário inexistente",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code deve ser 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Deve validar a propriedade message\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property(\"message\");\r",
									"});\r",
									"\r",
									"pm.test(\"Deve validar a mensagem de retorno\", function () {\r",
									"    pm.expect(pm.response.text()).to.include((\"Usuário não encontrado\"));\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{user_service_url}}?userId=a5c55c7f-8cd0-4fbe-b5df-3806e0c66bb4",
							"host": [
								"{{user_service_url}}"
							],
							"query": [
								{
									"key": "userId",
									"value": "a5c55c7f-8cd0-4fbe-b5df-3806e0c66bb4"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Deletar usuário sem informar ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code deve ser 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Deve validar a propriedade message\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property(\"message\");\r",
									"});\r",
									"\r",
									"pm.test(\"Deve validar a mensagem de retorno\", function () {\r",
									"    pm.expect(pm.response.text()).to.include((\"O id não pode ser vazio\").toLowerCase());\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{user_service_url}}?userId=",
							"host": [
								"{{user_service_url}}"
							],
							"query": [
								{
									"key": "userId",
									"value": ""
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"function isTokenExpired(token) {\r",
					"    try {\r",
					"        const payload = JSON.parse(atob(token.split('.')[1]));\r",
					"        const now = Math.floor(Date.now() / 1000);\r",
					"        return payload.exp < now;\r",
					"    } catch (e) {\r",
					"        return true;\r",
					"    }\r",
					"}\r",
					"\r",
					"const token = pm.environment.get(\"adminToken\");\r",
					"\r",
					"if (!token || isTokenExpired(token)) {\r",
					"    console.log(\"Token ausente ou expirado. Realizando login...\");\r",
					"\r",
					"    pm.sendRequest({\r",
					"        url: pm.environment.get('auth_service_url') + '/login',\r",
					"        method: 'POST',\r",
					"        header: {\r",
					"            'Content-Type': 'application/json'\r",
					"        },\r",
					"        body: {\r",
					"            mode: 'raw',\r",
					"            raw: JSON.stringify({\r",
					"                userEmail: 'teste@example.com',\r",
					"                passwordProvided: '@JMKIoowD03#'\r",
					"            })\r",
					"        }\r",
					"    }, function (err, res) {\r",
					"        if (!err) {\r",
					"            const json = res.json();\r",
					"            pm.environment.set(\"adminToken\", json.userToken);\r",
					"        } else {\r",
					"            console.log(\"Erro ao fazer login de admin:\", err);\r",
					"        }\r",
					"    });\r",
					"}\r",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	]
}